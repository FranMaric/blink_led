
blink_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003cf8  08003cf8  00013cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d5c  08003d5c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003d5c  08003d5c  00013d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d64  08003d64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d64  08003d64  00013d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d68  08003d68  00013d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08003ddc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003ddc  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cad7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001997  00000000  00000000  0002cb77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  0002e510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  0002f098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164dd  00000000  00000000  0002fb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ceb3  00000000  00000000  00046065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e0fc  00000000  00000000  00052f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1014  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035b8  00000000  00000000  000e1064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003ce0 	.word	0x08003ce0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003ce0 	.word	0x08003ce0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <update_rotary_encoder>:
	double velocity_in_radian;
	double angle_in_radian;
} rotary_encoder;


void update_rotary_encoder(rotary_encoder* encoder, TIM_HandleTypeDef *htim) {
 8000d70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d74:	b084      	sub	sp, #16
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	6039      	str	r1, [r7, #0]
	uint32_t current_count = __HAL_TIM_GET_COUNTER(htim);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d82:	60fb      	str	r3, [r7, #12]

	if (encoder->previous_count == current_count) {
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d103      	bne.n	8000d96 <update_rotary_encoder+0x26>
		encoder->velocity_in_ticks = 0;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	e039      	b.n	8000e0a <update_rotary_encoder+0x9a>

	} else if (current_count > encoder->previous_count) {
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d91a      	bls.n	8000dd6 <update_rotary_encoder+0x66>

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) {
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0310 	and.w	r3, r3, #16
 8000daa:	2b10      	cmp	r3, #16
 8000dac:	d10b      	bne.n	8000dc6 <update_rotary_encoder+0x56>
			// underflow happened, AUTORELOAD value is the max timer register size (2^32 - 1)
			encoder->velocity_in_ticks = -encoder->previous_count - (__HAL_TIM_GET_AUTORELOAD(htim) - current_count);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	1ad2      	subs	r2, r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	e021      	b.n	8000e0a <update_rotary_encoder+0x9a>
		} else {
			encoder->velocity_in_ticks = current_count - encoder->previous_count;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	461a      	mov	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	e019      	b.n	8000e0a <update_rotary_encoder+0x9a>
		}

	} else {

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) {
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0310 	and.w	r3, r3, #16
 8000de0:	2b10      	cmp	r3, #16
 8000de2:	d107      	bne.n	8000df4 <update_rotary_encoder+0x84>
			encoder->velocity_in_ticks = current_count - encoder->previous_count;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	461a      	mov	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	e00a      	b.n	8000e0a <update_rotary_encoder+0x9a>
		} else {
			// overflow happened, AUTORELOAD value is the max timer register size (2^32 - 1)
			encoder->velocity_in_ticks = (__HAL_TIM_GET_AUTORELOAD(htim) - encoder->previous_count) + current_count;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	1ad2      	subs	r2, r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	461a      	mov	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	605a      	str	r2, [r3, #4]
		}
	}

	encoder->previous_count = current_count;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	601a      	str	r2, [r3, #0]
	encoder->angle_in_ticks += encoder->velocity_in_ticks;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	6849      	ldr	r1, [r1, #4]
 8000e1a:	17c8      	asrs	r0, r1, #31
 8000e1c:	460c      	mov	r4, r1
 8000e1e:	4605      	mov	r5, r0
 8000e20:	eb12 0804 	adds.w	r8, r2, r4
 8000e24:	eb43 0905 	adc.w	r9, r3, r5
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	e9c3 8902 	strd	r8, r9, [r3, #8]

	encoder->velocity_in_radian =  (double) encoder->velocity_in_ticks / ENCODER_TICKS_PER_REVOLUTION * PI;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fb76 	bl	8000524 <__aeabi_i2d>
 8000e38:	f04f 0200 	mov.w	r2, #0
 8000e3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <update_rotary_encoder+0x138>)
 8000e3e:	f7ff fd05 	bl	800084c <__aeabi_ddiv>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	4610      	mov	r0, r2
 8000e48:	4619      	mov	r1, r3
 8000e4a:	a315      	add	r3, pc, #84	; (adr r3, 8000ea0 <update_rotary_encoder+0x130>)
 8000e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e50:	f7ff fbd2 	bl	80005f8 <__aeabi_dmul>
 8000e54:	4602      	mov	r2, r0
 8000e56:	460b      	mov	r3, r1
 8000e58:	6879      	ldr	r1, [r7, #4]
 8000e5a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	encoder->angle_in_radian = (double) encoder->angle_in_ticks / ENCODER_TICKS_PER_REVOLUTION * PI;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e64:	4610      	mov	r0, r2
 8000e66:	4619      	mov	r1, r3
 8000e68:	f7ff fb98 	bl	800059c <__aeabi_l2d>
 8000e6c:	f04f 0200 	mov.w	r2, #0
 8000e70:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <update_rotary_encoder+0x138>)
 8000e72:	f7ff fceb 	bl	800084c <__aeabi_ddiv>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	a308      	add	r3, pc, #32	; (adr r3, 8000ea0 <update_rotary_encoder+0x130>)
 8000e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e84:	f7ff fbb8 	bl	80005f8 <__aeabi_dmul>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000e9c:	f3af 8000 	nop.w
 8000ea0:	54442d18 	.word	0x54442d18
 8000ea4:	400921fb 	.word	0x400921fb
 8000ea8:	40af4000 	.word	0x40af4000

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b0a3      	sub	sp, #140	; 0x8c
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb2:	f000 fb1f 	bl	80014f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb6:	f000 f85d 	bl	8000f74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eba:	f000 f943 	bl	8001144 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ebe:	f000 f917 	bl	80010f0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000ec2:	f000 f8c1 	bl	8001048 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000ec6:	213c      	movs	r1, #60	; 0x3c
 8000ec8:	4826      	ldr	r0, [pc, #152]	; (8000f64 <main+0xb8>)
 8000eca:	f001 fb97 	bl	80025fc <HAL_TIM_Encoder_Start_IT>

  uint8_t uart_message[100] = {'\0'};
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ed6:	2260      	movs	r2, #96	; 0x60
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f002 fa8a 	bl	80033f4 <memset>

  rotary_encoder encoder1;
  encoder1.angle_in_ticks = 0;
 8000ee0:	f04f 0200 	mov.w	r2, #0
 8000ee4:	f04f 0300 	mov.w	r3, #0
 8000ee8:	e9c7 2302 	strd	r2, r3, [r7, #8]
  encoder1.previous_count = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	603b      	str	r3, [r7, #0]
  encoder1.velocity_in_ticks = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	607b      	str	r3, [r7, #4]
  encoder1.velocity_in_radian = 0;
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	f04f 0300 	mov.w	r3, #0
 8000efc:	e9c7 2304 	strd	r2, r3, [r7, #16]
  encoder1.angle_in_radian = 0;
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	e9c7 2306 	strd	r2, r3, [r7, #24]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// Encoder loop
	update_rotary_encoder(&encoder1, &htim2);
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	4915      	ldr	r1, [pc, #84]	; (8000f64 <main+0xb8>)
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff2d 	bl	8000d70 <update_rotary_encoder>

	// UART communication
	sprintf(uart_message, "count %u angle %d \n\r", encoder1.previous_count, (int)encoder1.angle_in_radian);
 8000f16:	683c      	ldr	r4, [r7, #0]
 8000f18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f7ff fd7c 	bl	8000a1c <__aeabi_d2iz>
 8000f24:	4603      	mov	r3, r0
 8000f26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000f2a:	4622      	mov	r2, r4
 8000f2c:	490e      	ldr	r1, [pc, #56]	; (8000f68 <main+0xbc>)
 8000f2e:	f002 fa69 	bl	8003404 <siprintf>
	HAL_UART_Transmit(&huart2, uart_message, sizeof(uart_message), HAL_MAX_DELAY);
 8000f32:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f3a:	2264      	movs	r2, #100	; 0x64
 8000f3c:	480b      	ldr	r0, [pc, #44]	; (8000f6c <main+0xc0>)
 8000f3e:	f001 feba 	bl	8002cb6 <HAL_UART_Transmit>

	// Flash led
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	2120      	movs	r1, #32
 8000f46:	480a      	ldr	r0, [pc, #40]	; (8000f70 <main+0xc4>)
 8000f48:	f000 fe00 	bl	8001b4c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000f4c:	2014      	movs	r0, #20
 8000f4e:	f000 fb43 	bl	80015d8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2120      	movs	r1, #32
 8000f56:	4806      	ldr	r0, [pc, #24]	; (8000f70 <main+0xc4>)
 8000f58:	f000 fdf8 	bl	8001b4c <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8000f5c:	2028      	movs	r0, #40	; 0x28
 8000f5e:	f000 fb3b 	bl	80015d8 <HAL_Delay>
	update_rotary_encoder(&encoder1, &htim2);
 8000f62:	e7d3      	b.n	8000f0c <main+0x60>
 8000f64:	2000008c 	.word	0x2000008c
 8000f68:	08003cf8 	.word	0x08003cf8
 8000f6c:	200000d4 	.word	0x200000d4
 8000f70:	40020000 	.word	0x40020000

08000f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b094      	sub	sp, #80	; 0x50
 8000f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7a:	f107 0320 	add.w	r3, r7, #32
 8000f7e:	2230      	movs	r2, #48	; 0x30
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f002 fa36 	bl	80033f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	4b28      	ldr	r3, [pc, #160]	; (8001040 <SystemClock_Config+0xcc>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	4a27      	ldr	r2, [pc, #156]	; (8001040 <SystemClock_Config+0xcc>)
 8000fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa8:	4b25      	ldr	r3, [pc, #148]	; (8001040 <SystemClock_Config+0xcc>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	4b22      	ldr	r3, [pc, #136]	; (8001044 <SystemClock_Config+0xd0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a21      	ldr	r2, [pc, #132]	; (8001044 <SystemClock_Config+0xd0>)
 8000fbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <SystemClock_Config+0xd0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd8:	2310      	movs	r3, #16
 8000fda:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fe8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff6:	f107 0320 	add.w	r3, r7, #32
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fdc0 	bl	8001b80 <HAL_RCC_OscConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001006:	f000 f90b 	bl	8001220 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100a:	230f      	movs	r3, #15
 800100c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100e:	2302      	movs	r3, #2
 8001010:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	2102      	movs	r1, #2
 8001026:	4618      	mov	r0, r3
 8001028:	f001 f822 	bl	8002070 <HAL_RCC_ClockConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001032:	f000 f8f5 	bl	8001220 <Error_Handler>
  }
}
 8001036:	bf00      	nop
 8001038:	3750      	adds	r7, #80	; 0x50
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	40007000 	.word	0x40007000

08001048 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	2224      	movs	r2, #36	; 0x24
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f002 f9cc 	bl	80033f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001064:	4b21      	ldr	r3, [pc, #132]	; (80010ec <MX_TIM2_Init+0xa4>)
 8001066:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800106a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800106c:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <MX_TIM2_Init+0xa4>)
 800106e:	2200      	movs	r2, #0
 8001070:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001072:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <MX_TIM2_Init+0xa4>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001078:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <MX_TIM2_Init+0xa4>)
 800107a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800107e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001080:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <MX_TIM2_Init+0xa4>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <MX_TIM2_Init+0xa4>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800108c:	2303      	movs	r3, #3
 800108e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001090:	2302      	movs	r3, #2
 8001092:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001094:	2301      	movs	r3, #1
 8001096:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80010a0:	2302      	movs	r3, #2
 80010a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010a4:	2301      	movs	r3, #1
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	4619      	mov	r1, r3
 80010b6:	480d      	ldr	r0, [pc, #52]	; (80010ec <MX_TIM2_Init+0xa4>)
 80010b8:	f001 f9fa 	bl	80024b0 <HAL_TIM_Encoder_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80010c2:	f000 f8ad 	bl	8001220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	4619      	mov	r1, r3
 80010d2:	4806      	ldr	r0, [pc, #24]	; (80010ec <MX_TIM2_Init+0xa4>)
 80010d4:	f001 fd20 	bl	8002b18 <HAL_TIMEx_MasterConfigSynchronization>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80010de:	f000 f89f 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	3730      	adds	r7, #48	; 0x30
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2000008c 	.word	0x2000008c

080010f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <MX_USART2_UART_Init+0x4c>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <MX_USART2_UART_Init+0x50>)
 80010f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <MX_USART2_UART_Init+0x4c>)
 80010fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001100:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_USART2_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_USART2_UART_Init+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <MX_USART2_UART_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_USART2_UART_Init+0x4c>)
 8001116:	220c      	movs	r2, #12
 8001118:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <MX_USART2_UART_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_USART2_UART_Init+0x4c>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <MX_USART2_UART_Init+0x4c>)
 8001128:	f001 fd78 	bl	8002c1c <HAL_UART_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001132:	f000 f875 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200000d4 	.word	0x200000d4
 8001140:	40004400 	.word	0x40004400

08001144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <MX_GPIO_Init+0xd0>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a2c      	ldr	r2, [pc, #176]	; (8001214 <MX_GPIO_Init+0xd0>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <MX_GPIO_Init+0xd0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <MX_GPIO_Init+0xd0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a25      	ldr	r2, [pc, #148]	; (8001214 <MX_GPIO_Init+0xd0>)
 8001180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b23      	ldr	r3, [pc, #140]	; (8001214 <MX_GPIO_Init+0xd0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <MX_GPIO_Init+0xd0>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <MX_GPIO_Init+0xd0>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <MX_GPIO_Init+0xd0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <MX_GPIO_Init+0xd0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a17      	ldr	r2, [pc, #92]	; (8001214 <MX_GPIO_Init+0xd0>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_GPIO_Init+0xd0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2120      	movs	r1, #32
 80011ce:	4812      	ldr	r0, [pc, #72]	; (8001218 <MX_GPIO_Init+0xd4>)
 80011d0:	f000 fcbc 	bl	8001b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	480c      	ldr	r0, [pc, #48]	; (800121c <MX_GPIO_Init+0xd8>)
 80011ec:	f000 fb2a 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011f0:	2320      	movs	r3, #32
 80011f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	4804      	ldr	r0, [pc, #16]	; (8001218 <MX_GPIO_Init+0xd4>)
 8001208:	f000 fb1c 	bl	8001844 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800120c:	bf00      	nop
 800120e:	3728      	adds	r7, #40	; 0x28
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40023800 	.word	0x40023800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020800 	.word	0x40020800

08001220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001228:	e7fe      	b.n	8001228 <Error_Handler+0x8>
	...

0800122c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <HAL_MspInit+0x4c>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	4a0f      	ldr	r2, [pc, #60]	; (8001278 <HAL_MspInit+0x4c>)
 800123c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001240:	6453      	str	r3, [r2, #68]	; 0x44
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <HAL_MspInit+0x4c>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <HAL_MspInit+0x4c>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	4a08      	ldr	r2, [pc, #32]	; (8001278 <HAL_MspInit+0x4c>)
 8001258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125c:	6413      	str	r3, [r2, #64]	; 0x40
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_MspInit+0x4c>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800126a:	2007      	movs	r0, #7
 800126c:	f000 faa8 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40023800 	.word	0x40023800

0800127c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800129c:	d133      	bne.n	8001306 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <HAL_TIM_Encoder_MspInit+0x94>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	4a1a      	ldr	r2, [pc, #104]	; (8001310 <HAL_TIM_Encoder_MspInit+0x94>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6413      	str	r3, [r2, #64]	; 0x40
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <HAL_TIM_Encoder_MspInit+0x94>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <HAL_TIM_Encoder_MspInit+0x94>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a13      	ldr	r2, [pc, #76]	; (8001310 <HAL_TIM_Encoder_MspInit+0x94>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <HAL_TIM_Encoder_MspInit+0x94>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012d6:	2303      	movs	r3, #3
 80012d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012e6:	2301      	movs	r3, #1
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	4808      	ldr	r0, [pc, #32]	; (8001314 <HAL_TIM_Encoder_MspInit+0x98>)
 80012f2:	f000 faa7 	bl	8001844 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	201c      	movs	r0, #28
 80012fc:	f000 fa6b 	bl	80017d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001300:	201c      	movs	r0, #28
 8001302:	f000 fa84 	bl	800180e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001306:	bf00      	nop
 8001308:	3728      	adds	r7, #40	; 0x28
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	40020000 	.word	0x40020000

08001318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a19      	ldr	r2, [pc, #100]	; (800139c <HAL_UART_MspInit+0x84>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d12b      	bne.n	8001392 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <HAL_UART_MspInit+0x88>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	4a17      	ldr	r2, [pc, #92]	; (80013a0 <HAL_UART_MspInit+0x88>)
 8001344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_UART_MspInit+0x88>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_UART_MspInit+0x88>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a10      	ldr	r2, [pc, #64]	; (80013a0 <HAL_UART_MspInit+0x88>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_UART_MspInit+0x88>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001372:	230c      	movs	r3, #12
 8001374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001382:	2307      	movs	r3, #7
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	4805      	ldr	r0, [pc, #20]	; (80013a4 <HAL_UART_MspInit+0x8c>)
 800138e:	f000 fa59 	bl	8001844 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40004400 	.word	0x40004400
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020000 	.word	0x40020000

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <NMI_Handler+0x4>

080013ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler+0x4>

080013ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f4:	f000 f8d0 	bl	8001598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <TIM2_IRQHandler+0x10>)
 8001402:	f001 f9a9 	bl	8002758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000008c 	.word	0x2000008c

08001410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <_sbrk+0x5c>)
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <_sbrk+0x60>)
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <_sbrk+0x64>)
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <_sbrk+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d207      	bcs.n	8001450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001440:	f001 ffae 	bl	80033a0 <__errno>
 8001444:	4603      	mov	r3, r0
 8001446:	220c      	movs	r2, #12
 8001448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800144e:	e009      	b.n	8001464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <_sbrk+0x64>)
 8001460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20020000 	.word	0x20020000
 8001470:	00000400 	.word	0x00000400
 8001474:	20000118 	.word	0x20000118
 8001478:	20000130 	.word	0x20000130

0800147c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <SystemInit+0x20>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001486:	4a05      	ldr	r2, [pc, #20]	; (800149c <SystemInit+0x20>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014a6:	490e      	ldr	r1, [pc, #56]	; (80014e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ac:	e002      	b.n	80014b4 <LoopCopyDataInit>

080014ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b2:	3304      	adds	r3, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b8:	d3f9      	bcc.n	80014ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ba:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014bc:	4c0b      	ldr	r4, [pc, #44]	; (80014ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c0:	e001      	b.n	80014c6 <LoopFillZerobss>

080014c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c4:	3204      	adds	r2, #4

080014c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c8:	d3fb      	bcc.n	80014c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014ca:	f7ff ffd7 	bl	800147c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ce:	f001 ff6d 	bl	80033ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014d2:	f7ff fceb 	bl	8000eac <main>
  bx  lr    
 80014d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014e4:	08003d6c 	.word	0x08003d6c
  ldr r2, =_sbss
 80014e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014ec:	20000130 	.word	0x20000130

080014f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC_IRQHandler>
	...

080014f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_Init+0x40>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <HAL_Init+0x40>)
 80014fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001502:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_Init+0x40>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <HAL_Init+0x40>)
 800150a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800150e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_Init+0x40>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <HAL_Init+0x40>)
 8001516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151c:	2003      	movs	r0, #3
 800151e:	f000 f94f 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001522:	2000      	movs	r0, #0
 8001524:	f000 f808 	bl	8001538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001528:	f7ff fe80 	bl	800122c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40023c00 	.word	0x40023c00

08001538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_InitTick+0x54>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_InitTick+0x58>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001552:	fbb2 f3f3 	udiv	r3, r2, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f967 	bl	800182a <HAL_SYSTICK_Config>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e00e      	b.n	8001584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b0f      	cmp	r3, #15
 800156a:	d80a      	bhi.n	8001582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800156c:	2200      	movs	r2, #0
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001574:	f000 f92f 	bl	80017d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001578:	4a06      	ldr	r2, [pc, #24]	; (8001594 <HAL_InitTick+0x5c>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	e000      	b.n	8001584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000000 	.word	0x20000000
 8001590:	20000008 	.word	0x20000008
 8001594:	20000004 	.word	0x20000004

08001598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_IncTick+0x20>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_IncTick+0x24>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <HAL_IncTick+0x24>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000008 	.word	0x20000008
 80015bc:	2000011c 	.word	0x2000011c

080015c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTick;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <HAL_GetTick+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	2000011c 	.word	0x2000011c

080015d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff ffee 	bl	80015c0 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015f0:	d005      	beq.n	80015fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_Delay+0x44>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015fe:	bf00      	nop
 8001600:	f7ff ffde 	bl	80015c0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8f7      	bhi.n	8001600 <HAL_Delay+0x28>
  {
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000008 	.word	0x20000008

08001620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800164c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001652:	4a04      	ldr	r2, [pc, #16]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <__NVIC_GetPriorityGrouping+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0307 	and.w	r3, r3, #7
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db0b      	blt.n	80016ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	4907      	ldr	r1, [pc, #28]	; (80016bc <__NVIC_EnableIRQ+0x38>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2001      	movs	r0, #1
 80016a6:	fa00 f202 	lsl.w	r2, r0, r2
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	; (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800178c:	d301      	bcc.n	8001792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178e:	2301      	movs	r3, #1
 8001790:	e00f      	b.n	80017b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <SysTick_Config+0x40>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179a:	210f      	movs	r1, #15
 800179c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017a0:	f7ff ff8e 	bl	80016c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <SysTick_Config+0x40>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017aa:	4b04      	ldr	r3, [pc, #16]	; (80017bc <SysTick_Config+0x40>)
 80017ac:	2207      	movs	r2, #7
 80017ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	e000e010 	.word	0xe000e010

080017c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ff29 	bl	8001620 <__NVIC_SetPriorityGrouping>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e8:	f7ff ff3e 	bl	8001668 <__NVIC_GetPriorityGrouping>
 80017ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	6978      	ldr	r0, [r7, #20]
 80017f4:	f7ff ff8e 	bl	8001714 <NVIC_EncodePriority>
 80017f8:	4602      	mov	r2, r0
 80017fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff5d 	bl	80016c0 <__NVIC_SetPriority>
}
 8001806:	bf00      	nop
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff31 	bl	8001684 <__NVIC_EnableIRQ>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ffa2 	bl	800177c <SysTick_Config>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	e159      	b.n	8001b14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001860:	2201      	movs	r2, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	429a      	cmp	r2, r3
 800187a:	f040 8148 	bne.w	8001b0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b01      	cmp	r3, #1
 8001888:	d005      	beq.n	8001896 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001892:	2b02      	cmp	r3, #2
 8001894:	d130      	bne.n	80018f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	2203      	movs	r2, #3
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018cc:	2201      	movs	r2, #1
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	f003 0201 	and.w	r2, r3, #1
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b03      	cmp	r3, #3
 8001902:	d017      	beq.n	8001934 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	2203      	movs	r2, #3
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d123      	bne.n	8001988 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	08da      	lsrs	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3208      	adds	r2, #8
 8001948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	220f      	movs	r2, #15
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	691a      	ldr	r2, [r3, #16]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	08da      	lsrs	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3208      	adds	r2, #8
 8001982:	69b9      	ldr	r1, [r7, #24]
 8001984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0203 	and.w	r2, r3, #3
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 80a2 	beq.w	8001b0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	4b57      	ldr	r3, [pc, #348]	; (8001b2c <HAL_GPIO_Init+0x2e8>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	4a56      	ldr	r2, [pc, #344]	; (8001b2c <HAL_GPIO_Init+0x2e8>)
 80019d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d8:	6453      	str	r3, [r2, #68]	; 0x44
 80019da:	4b54      	ldr	r3, [pc, #336]	; (8001b2c <HAL_GPIO_Init+0x2e8>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019e6:	4a52      	ldr	r2, [pc, #328]	; (8001b30 <HAL_GPIO_Init+0x2ec>)
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	089b      	lsrs	r3, r3, #2
 80019ec:	3302      	adds	r3, #2
 80019ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	220f      	movs	r2, #15
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a49      	ldr	r2, [pc, #292]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d019      	beq.n	8001a46 <HAL_GPIO_Init+0x202>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a48      	ldr	r2, [pc, #288]	; (8001b38 <HAL_GPIO_Init+0x2f4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d013      	beq.n	8001a42 <HAL_GPIO_Init+0x1fe>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a47      	ldr	r2, [pc, #284]	; (8001b3c <HAL_GPIO_Init+0x2f8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d00d      	beq.n	8001a3e <HAL_GPIO_Init+0x1fa>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a46      	ldr	r2, [pc, #280]	; (8001b40 <HAL_GPIO_Init+0x2fc>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d007      	beq.n	8001a3a <HAL_GPIO_Init+0x1f6>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a45      	ldr	r2, [pc, #276]	; (8001b44 <HAL_GPIO_Init+0x300>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d101      	bne.n	8001a36 <HAL_GPIO_Init+0x1f2>
 8001a32:	2304      	movs	r3, #4
 8001a34:	e008      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a36:	2307      	movs	r3, #7
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e004      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e002      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a46:	2300      	movs	r3, #0
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	f002 0203 	and.w	r2, r2, #3
 8001a4e:	0092      	lsls	r2, r2, #2
 8001a50:	4093      	lsls	r3, r2
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a58:	4935      	ldr	r1, [pc, #212]	; (8001b30 <HAL_GPIO_Init+0x2ec>)
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	3302      	adds	r3, #2
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a66:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a8a:	4a2f      	ldr	r2, [pc, #188]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a90:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ab4:	4a24      	ldr	r2, [pc, #144]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aba:	4b23      	ldr	r3, [pc, #140]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ade:	4a1a      	ldr	r2, [pc, #104]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b08:	4a0f      	ldr	r2, [pc, #60]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3301      	adds	r3, #1
 8001b12:	61fb      	str	r3, [r7, #28]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	2b0f      	cmp	r3, #15
 8001b18:	f67f aea2 	bls.w	8001860 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3724      	adds	r7, #36	; 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40013800 	.word	0x40013800
 8001b34:	40020000 	.word	0x40020000
 8001b38:	40020400 	.word	0x40020400
 8001b3c:	40020800 	.word	0x40020800
 8001b40:	40020c00 	.word	0x40020c00
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40013c00 	.word	0x40013c00

08001b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	807b      	strh	r3, [r7, #2]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b5c:	787b      	ldrb	r3, [r7, #1]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b62:	887a      	ldrh	r2, [r7, #2]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b68:	e003      	b.n	8001b72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b6a:	887b      	ldrh	r3, [r7, #2]
 8001b6c:	041a      	lsls	r2, r3, #16
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	619a      	str	r2, [r3, #24]
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e267      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d075      	beq.n	8001c8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b9e:	4b88      	ldr	r3, [pc, #544]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d00c      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001baa:	4b85      	ldr	r3, [pc, #532]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d112      	bne.n	8001bdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bb6:	4b82      	ldr	r3, [pc, #520]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bc2:	d10b      	bne.n	8001bdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc4:	4b7e      	ldr	r3, [pc, #504]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d05b      	beq.n	8001c88 <HAL_RCC_OscConfig+0x108>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d157      	bne.n	8001c88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e242      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be4:	d106      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x74>
 8001be6:	4b76      	ldr	r3, [pc, #472]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a75      	ldr	r2, [pc, #468]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e01d      	b.n	8001c30 <HAL_RCC_OscConfig+0xb0>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bfc:	d10c      	bne.n	8001c18 <HAL_RCC_OscConfig+0x98>
 8001bfe:	4b70      	ldr	r3, [pc, #448]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a6f      	ldr	r2, [pc, #444]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	4b6d      	ldr	r3, [pc, #436]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a6c      	ldr	r2, [pc, #432]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	e00b      	b.n	8001c30 <HAL_RCC_OscConfig+0xb0>
 8001c18:	4b69      	ldr	r3, [pc, #420]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a68      	ldr	r2, [pc, #416]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b66      	ldr	r3, [pc, #408]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a65      	ldr	r2, [pc, #404]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d013      	beq.n	8001c60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7ff fcc2 	bl	80015c0 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c40:	f7ff fcbe 	bl	80015c0 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	; 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e207      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c52:	4b5b      	ldr	r3, [pc, #364]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0xc0>
 8001c5e:	e014      	b.n	8001c8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c60:	f7ff fcae 	bl	80015c0 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c68:	f7ff fcaa 	bl	80015c0 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b64      	cmp	r3, #100	; 0x64
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e1f3      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7a:	4b51      	ldr	r3, [pc, #324]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0xe8>
 8001c86:	e000      	b.n	8001c8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d063      	beq.n	8001d5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c96:	4b4a      	ldr	r3, [pc, #296]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00b      	beq.n	8001cba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ca2:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d11c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cae:	4b44      	ldr	r3, [pc, #272]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d116      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cba:	4b41      	ldr	r3, [pc, #260]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d005      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x152>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d001      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e1c7      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	4937      	ldr	r1, [pc, #220]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce6:	e03a      	b.n	8001d5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d020      	beq.n	8001d32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf0:	4b34      	ldr	r3, [pc, #208]	; (8001dc4 <HAL_RCC_OscConfig+0x244>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf6:	f7ff fc63 	bl	80015c0 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cfe:	f7ff fc5f 	bl	80015c0 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e1a8      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d10:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1c:	4b28      	ldr	r3, [pc, #160]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4925      	ldr	r1, [pc, #148]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	600b      	str	r3, [r1, #0]
 8001d30:	e015      	b.n	8001d5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d32:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <HAL_RCC_OscConfig+0x244>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7ff fc42 	bl	80015c0 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d40:	f7ff fc3e 	bl	80015c0 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e187      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d52:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d036      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d016      	beq.n	8001da0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <HAL_RCC_OscConfig+0x248>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d78:	f7ff fc22 	bl	80015c0 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d80:	f7ff fc1e 	bl	80015c0 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e167      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_RCC_OscConfig+0x240>)
 8001d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0x200>
 8001d9e:	e01b      	b.n	8001dd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da0:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_RCC_OscConfig+0x248>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da6:	f7ff fc0b 	bl	80015c0 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dac:	e00e      	b.n	8001dcc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dae:	f7ff fc07 	bl	80015c0 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d907      	bls.n	8001dcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e150      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	42470000 	.word	0x42470000
 8001dc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dcc:	4b88      	ldr	r3, [pc, #544]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1ea      	bne.n	8001dae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 8097 	beq.w	8001f14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de6:	2300      	movs	r3, #0
 8001de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dea:	4b81      	ldr	r3, [pc, #516]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10f      	bne.n	8001e16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	4b7d      	ldr	r3, [pc, #500]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a7c      	ldr	r2, [pc, #496]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
 8001e06:	4b7a      	ldr	r3, [pc, #488]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e12:	2301      	movs	r3, #1
 8001e14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e16:	4b77      	ldr	r3, [pc, #476]	; (8001ff4 <HAL_RCC_OscConfig+0x474>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d118      	bne.n	8001e54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e22:	4b74      	ldr	r3, [pc, #464]	; (8001ff4 <HAL_RCC_OscConfig+0x474>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a73      	ldr	r2, [pc, #460]	; (8001ff4 <HAL_RCC_OscConfig+0x474>)
 8001e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e2e:	f7ff fbc7 	bl	80015c0 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e36:	f7ff fbc3 	bl	80015c0 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e10c      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e48:	4b6a      	ldr	r3, [pc, #424]	; (8001ff4 <HAL_RCC_OscConfig+0x474>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0f0      	beq.n	8001e36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d106      	bne.n	8001e6a <HAL_RCC_OscConfig+0x2ea>
 8001e5c:	4b64      	ldr	r3, [pc, #400]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e60:	4a63      	ldr	r2, [pc, #396]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6713      	str	r3, [r2, #112]	; 0x70
 8001e68:	e01c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x324>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b05      	cmp	r3, #5
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x30c>
 8001e72:	4b5f      	ldr	r3, [pc, #380]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e76:	4a5e      	ldr	r2, [pc, #376]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7e:	4b5c      	ldr	r3, [pc, #368]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e82:	4a5b      	ldr	r2, [pc, #364]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6713      	str	r3, [r2, #112]	; 0x70
 8001e8a:	e00b      	b.n	8001ea4 <HAL_RCC_OscConfig+0x324>
 8001e8c:	4b58      	ldr	r3, [pc, #352]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e90:	4a57      	ldr	r2, [pc, #348]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001e92:	f023 0301 	bic.w	r3, r3, #1
 8001e96:	6713      	str	r3, [r2, #112]	; 0x70
 8001e98:	4b55      	ldr	r3, [pc, #340]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9c:	4a54      	ldr	r2, [pc, #336]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001e9e:	f023 0304 	bic.w	r3, r3, #4
 8001ea2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d015      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eac:	f7ff fb88 	bl	80015c0 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb2:	e00a      	b.n	8001eca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb4:	f7ff fb84 	bl	80015c0 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e0cb      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eca:	4b49      	ldr	r3, [pc, #292]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0ee      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x334>
 8001ed6:	e014      	b.n	8001f02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed8:	f7ff fb72 	bl	80015c0 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ede:	e00a      	b.n	8001ef6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee0:	f7ff fb6e 	bl	80015c0 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e0b5      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef6:	4b3e      	ldr	r3, [pc, #248]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1ee      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f02:	7dfb      	ldrb	r3, [r7, #23]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d105      	bne.n	8001f14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f08:	4b39      	ldr	r3, [pc, #228]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	4a38      	ldr	r2, [pc, #224]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001f0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 80a1 	beq.w	8002060 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f1e:	4b34      	ldr	r3, [pc, #208]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d05c      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d141      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f32:	4b31      	ldr	r3, [pc, #196]	; (8001ff8 <HAL_RCC_OscConfig+0x478>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7ff fb42 	bl	80015c0 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f40:	f7ff fb3e 	bl	80015c0 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e087      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f52:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69da      	ldr	r2, [r3, #28]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	019b      	lsls	r3, r3, #6
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	085b      	lsrs	r3, r3, #1
 8001f76:	3b01      	subs	r3, #1
 8001f78:	041b      	lsls	r3, r3, #16
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	061b      	lsls	r3, r3, #24
 8001f82:	491b      	ldr	r1, [pc, #108]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f88:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <HAL_RCC_OscConfig+0x478>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8e:	f7ff fb17 	bl	80015c0 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f96:	f7ff fb13 	bl	80015c0 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e05c      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0f0      	beq.n	8001f96 <HAL_RCC_OscConfig+0x416>
 8001fb4:	e054      	b.n	8002060 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <HAL_RCC_OscConfig+0x478>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7ff fb00 	bl	80015c0 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc4:	f7ff fafc 	bl	80015c0 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e045      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_RCC_OscConfig+0x470>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x444>
 8001fe2:	e03d      	b.n	8002060 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d107      	bne.n	8001ffc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e038      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40007000 	.word	0x40007000
 8001ff8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	; (800206c <HAL_RCC_OscConfig+0x4ec>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d028      	beq.n	800205c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002014:	429a      	cmp	r2, r3
 8002016:	d121      	bne.n	800205c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002022:	429a      	cmp	r2, r3
 8002024:	d11a      	bne.n	800205c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800202c:	4013      	ands	r3, r2
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002032:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002034:	4293      	cmp	r3, r2
 8002036:	d111      	bne.n	800205c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002042:	085b      	lsrs	r3, r3, #1
 8002044:	3b01      	subs	r3, #1
 8002046:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002048:	429a      	cmp	r2, r3
 800204a:	d107      	bne.n	800205c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002056:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002058:	429a      	cmp	r2, r3
 800205a:	d001      	beq.n	8002060 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800

08002070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0cc      	b.n	800221e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002084:	4b68      	ldr	r3, [pc, #416]	; (8002228 <HAL_RCC_ClockConfig+0x1b8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d90c      	bls.n	80020ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b65      	ldr	r3, [pc, #404]	; (8002228 <HAL_RCC_ClockConfig+0x1b8>)
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b63      	ldr	r3, [pc, #396]	; (8002228 <HAL_RCC_ClockConfig+0x1b8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0b8      	b.n	800221e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d020      	beq.n	80020fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020c4:	4b59      	ldr	r3, [pc, #356]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	4a58      	ldr	r2, [pc, #352]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020dc:	4b53      	ldr	r3, [pc, #332]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	4a52      	ldr	r2, [pc, #328]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e8:	4b50      	ldr	r3, [pc, #320]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	494d      	ldr	r1, [pc, #308]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d044      	beq.n	8002190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d107      	bne.n	800211e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	4b47      	ldr	r3, [pc, #284]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d119      	bne.n	800214e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e07f      	b.n	800221e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d003      	beq.n	800212e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800212a:	2b03      	cmp	r3, #3
 800212c:	d107      	bne.n	800213e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212e:	4b3f      	ldr	r3, [pc, #252]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d109      	bne.n	800214e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e06f      	b.n	800221e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213e:	4b3b      	ldr	r3, [pc, #236]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e067      	b.n	800221e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800214e:	4b37      	ldr	r3, [pc, #220]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f023 0203 	bic.w	r2, r3, #3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	4934      	ldr	r1, [pc, #208]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	4313      	orrs	r3, r2
 800215e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002160:	f7ff fa2e 	bl	80015c0 <HAL_GetTick>
 8002164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002166:	e00a      	b.n	800217e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002168:	f7ff fa2a 	bl	80015c0 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	f241 3288 	movw	r2, #5000	; 0x1388
 8002176:	4293      	cmp	r3, r2
 8002178:	d901      	bls.n	800217e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e04f      	b.n	800221e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217e:	4b2b      	ldr	r3, [pc, #172]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 020c 	and.w	r2, r3, #12
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	429a      	cmp	r2, r3
 800218e:	d1eb      	bne.n	8002168 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002190:	4b25      	ldr	r3, [pc, #148]	; (8002228 <HAL_RCC_ClockConfig+0x1b8>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d20c      	bcs.n	80021b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219e:	4b22      	ldr	r3, [pc, #136]	; (8002228 <HAL_RCC_ClockConfig+0x1b8>)
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	4b20      	ldr	r3, [pc, #128]	; (8002228 <HAL_RCC_ClockConfig+0x1b8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e032      	b.n	800221e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d008      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c4:	4b19      	ldr	r3, [pc, #100]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4916      	ldr	r1, [pc, #88]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021e2:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	490e      	ldr	r1, [pc, #56]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021f6:	f000 f821 	bl	800223c <HAL_RCC_GetSysClockFreq>
 80021fa:	4602      	mov	r2, r0
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	490a      	ldr	r1, [pc, #40]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	5ccb      	ldrb	r3, [r1, r3]
 800220a:	fa22 f303 	lsr.w	r3, r2, r3
 800220e:	4a09      	ldr	r2, [pc, #36]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_RCC_ClockConfig+0x1c8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff f98e 	bl	8001538 <HAL_InitTick>

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40023c00 	.word	0x40023c00
 800222c:	40023800 	.word	0x40023800
 8002230:	08003d10 	.word	0x08003d10
 8002234:	20000000 	.word	0x20000000
 8002238:	20000004 	.word	0x20000004

0800223c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800223c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002240:	b094      	sub	sp, #80	; 0x50
 8002242:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	647b      	str	r3, [r7, #68]	; 0x44
 8002248:	2300      	movs	r3, #0
 800224a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800224c:	2300      	movs	r3, #0
 800224e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002254:	4b79      	ldr	r3, [pc, #484]	; (800243c <HAL_RCC_GetSysClockFreq+0x200>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b08      	cmp	r3, #8
 800225e:	d00d      	beq.n	800227c <HAL_RCC_GetSysClockFreq+0x40>
 8002260:	2b08      	cmp	r3, #8
 8002262:	f200 80e1 	bhi.w	8002428 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0x34>
 800226a:	2b04      	cmp	r3, #4
 800226c:	d003      	beq.n	8002276 <HAL_RCC_GetSysClockFreq+0x3a>
 800226e:	e0db      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002270:	4b73      	ldr	r3, [pc, #460]	; (8002440 <HAL_RCC_GetSysClockFreq+0x204>)
 8002272:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002274:	e0db      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002276:	4b73      	ldr	r3, [pc, #460]	; (8002444 <HAL_RCC_GetSysClockFreq+0x208>)
 8002278:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800227a:	e0d8      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800227c:	4b6f      	ldr	r3, [pc, #444]	; (800243c <HAL_RCC_GetSysClockFreq+0x200>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002284:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002286:	4b6d      	ldr	r3, [pc, #436]	; (800243c <HAL_RCC_GetSysClockFreq+0x200>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d063      	beq.n	800235a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002292:	4b6a      	ldr	r3, [pc, #424]	; (800243c <HAL_RCC_GetSysClockFreq+0x200>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	099b      	lsrs	r3, r3, #6
 8002298:	2200      	movs	r2, #0
 800229a:	63bb      	str	r3, [r7, #56]	; 0x38
 800229c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800229e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a4:	633b      	str	r3, [r7, #48]	; 0x30
 80022a6:	2300      	movs	r3, #0
 80022a8:	637b      	str	r3, [r7, #52]	; 0x34
 80022aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022ae:	4622      	mov	r2, r4
 80022b0:	462b      	mov	r3, r5
 80022b2:	f04f 0000 	mov.w	r0, #0
 80022b6:	f04f 0100 	mov.w	r1, #0
 80022ba:	0159      	lsls	r1, r3, #5
 80022bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022c0:	0150      	lsls	r0, r2, #5
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4621      	mov	r1, r4
 80022c8:	1a51      	subs	r1, r2, r1
 80022ca:	6139      	str	r1, [r7, #16]
 80022cc:	4629      	mov	r1, r5
 80022ce:	eb63 0301 	sbc.w	r3, r3, r1
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022e0:	4659      	mov	r1, fp
 80022e2:	018b      	lsls	r3, r1, #6
 80022e4:	4651      	mov	r1, sl
 80022e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022ea:	4651      	mov	r1, sl
 80022ec:	018a      	lsls	r2, r1, #6
 80022ee:	4651      	mov	r1, sl
 80022f0:	ebb2 0801 	subs.w	r8, r2, r1
 80022f4:	4659      	mov	r1, fp
 80022f6:	eb63 0901 	sbc.w	r9, r3, r1
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002306:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800230a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800230e:	4690      	mov	r8, r2
 8002310:	4699      	mov	r9, r3
 8002312:	4623      	mov	r3, r4
 8002314:	eb18 0303 	adds.w	r3, r8, r3
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	462b      	mov	r3, r5
 800231c:	eb49 0303 	adc.w	r3, r9, r3
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800232e:	4629      	mov	r1, r5
 8002330:	024b      	lsls	r3, r1, #9
 8002332:	4621      	mov	r1, r4
 8002334:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002338:	4621      	mov	r1, r4
 800233a:	024a      	lsls	r2, r1, #9
 800233c:	4610      	mov	r0, r2
 800233e:	4619      	mov	r1, r3
 8002340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002342:	2200      	movs	r2, #0
 8002344:	62bb      	str	r3, [r7, #40]	; 0x28
 8002346:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002348:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800234c:	f7fe fb8e 	bl	8000a6c <__aeabi_uldivmod>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4613      	mov	r3, r2
 8002356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002358:	e058      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235a:	4b38      	ldr	r3, [pc, #224]	; (800243c <HAL_RCC_GetSysClockFreq+0x200>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	099b      	lsrs	r3, r3, #6
 8002360:	2200      	movs	r2, #0
 8002362:	4618      	mov	r0, r3
 8002364:	4611      	mov	r1, r2
 8002366:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800236a:	623b      	str	r3, [r7, #32]
 800236c:	2300      	movs	r3, #0
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
 8002370:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002374:	4642      	mov	r2, r8
 8002376:	464b      	mov	r3, r9
 8002378:	f04f 0000 	mov.w	r0, #0
 800237c:	f04f 0100 	mov.w	r1, #0
 8002380:	0159      	lsls	r1, r3, #5
 8002382:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002386:	0150      	lsls	r0, r2, #5
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4641      	mov	r1, r8
 800238e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002392:	4649      	mov	r1, r9
 8002394:	eb63 0b01 	sbc.w	fp, r3, r1
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023ac:	ebb2 040a 	subs.w	r4, r2, sl
 80023b0:	eb63 050b 	sbc.w	r5, r3, fp
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	00eb      	lsls	r3, r5, #3
 80023be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023c2:	00e2      	lsls	r2, r4, #3
 80023c4:	4614      	mov	r4, r2
 80023c6:	461d      	mov	r5, r3
 80023c8:	4643      	mov	r3, r8
 80023ca:	18e3      	adds	r3, r4, r3
 80023cc:	603b      	str	r3, [r7, #0]
 80023ce:	464b      	mov	r3, r9
 80023d0:	eb45 0303 	adc.w	r3, r5, r3
 80023d4:	607b      	str	r3, [r7, #4]
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023e2:	4629      	mov	r1, r5
 80023e4:	028b      	lsls	r3, r1, #10
 80023e6:	4621      	mov	r1, r4
 80023e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023ec:	4621      	mov	r1, r4
 80023ee:	028a      	lsls	r2, r1, #10
 80023f0:	4610      	mov	r0, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f6:	2200      	movs	r2, #0
 80023f8:	61bb      	str	r3, [r7, #24]
 80023fa:	61fa      	str	r2, [r7, #28]
 80023fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002400:	f7fe fb34 	bl	8000a6c <__aeabi_uldivmod>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4613      	mov	r3, r2
 800240a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCC_GetSysClockFreq+0x200>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	0c1b      	lsrs	r3, r3, #16
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	3301      	adds	r3, #1
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800241c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800241e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002420:	fbb2 f3f3 	udiv	r3, r2, r3
 8002424:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002426:	e002      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <HAL_RCC_GetSysClockFreq+0x204>)
 800242a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800242c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800242e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002430:	4618      	mov	r0, r3
 8002432:	3750      	adds	r7, #80	; 0x50
 8002434:	46bd      	mov	sp, r7
 8002436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800243a:	bf00      	nop
 800243c:	40023800 	.word	0x40023800
 8002440:	00f42400 	.word	0x00f42400
 8002444:	007a1200 	.word	0x007a1200

08002448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <HAL_RCC_GetHCLKFreq+0x14>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	20000000 	.word	0x20000000

08002460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002464:	f7ff fff0 	bl	8002448 <HAL_RCC_GetHCLKFreq>
 8002468:	4602      	mov	r2, r0
 800246a:	4b05      	ldr	r3, [pc, #20]	; (8002480 <HAL_RCC_GetPCLK1Freq+0x20>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	0a9b      	lsrs	r3, r3, #10
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	4903      	ldr	r1, [pc, #12]	; (8002484 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002476:	5ccb      	ldrb	r3, [r1, r3]
 8002478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800247c:	4618      	mov	r0, r3
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40023800 	.word	0x40023800
 8002484:	08003d20 	.word	0x08003d20

08002488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800248c:	f7ff ffdc 	bl	8002448 <HAL_RCC_GetHCLKFreq>
 8002490:	4602      	mov	r2, r0
 8002492:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	0b5b      	lsrs	r3, r3, #13
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	4903      	ldr	r1, [pc, #12]	; (80024ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800249e:	5ccb      	ldrb	r3, [r1, r3]
 80024a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40023800 	.word	0x40023800
 80024ac:	08003d20 	.word	0x08003d20

080024b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e097      	b.n	80025f4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d106      	bne.n	80024de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7fe fecf 	bl	800127c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2202      	movs	r2, #2
 80024e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024f4:	f023 0307 	bic.w	r3, r3, #7
 80024f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3304      	adds	r3, #4
 8002502:	4619      	mov	r1, r3
 8002504:	4610      	mov	r0, r2
 8002506:	f000 fa61 	bl	80029cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	4313      	orrs	r3, r2
 800252a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002532:	f023 0303 	bic.w	r3, r3, #3
 8002536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	021b      	lsls	r3, r3, #8
 8002542:	4313      	orrs	r3, r2
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002550:	f023 030c 	bic.w	r3, r3, #12
 8002554:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800255c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002560:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	4313      	orrs	r3, r2
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	011a      	lsls	r2, r3, #4
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	031b      	lsls	r3, r3, #12
 8002580:	4313      	orrs	r3, r2
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800258e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002596:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	4313      	orrs	r3, r2
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800260c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002614:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800261c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002624:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d110      	bne.n	800264e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d102      	bne.n	8002638 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002632:	7b7b      	ldrb	r3, [r7, #13]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d001      	beq.n	800263c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e089      	b.n	8002750 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2202      	movs	r2, #2
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800264c:	e031      	b.n	80026b2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b04      	cmp	r3, #4
 8002652:	d110      	bne.n	8002676 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002654:	7bbb      	ldrb	r3, [r7, #14]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d102      	bne.n	8002660 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800265a:	7b3b      	ldrb	r3, [r7, #12]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d001      	beq.n	8002664 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e075      	b.n	8002750 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002674:	e01d      	b.n	80026b2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d108      	bne.n	800268e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800267c:	7bbb      	ldrb	r3, [r7, #14]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d105      	bne.n	800268e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002682:	7b7b      	ldrb	r3, [r7, #13]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d102      	bne.n	800268e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002688:	7b3b      	ldrb	r3, [r7, #12]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d001      	beq.n	8002692 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e05e      	b.n	8002750 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2202      	movs	r2, #2
 8002696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2202      	movs	r2, #2
 800269e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2202      	movs	r2, #2
 80026a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2202      	movs	r2, #2
 80026ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_TIM_Encoder_Start_IT+0xc4>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d010      	beq.n	80026e0 <HAL_TIM_Encoder_Start_IT+0xe4>
 80026be:	e01f      	b.n	8002700 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2201      	movs	r2, #1
 80026c6:	2100      	movs	r1, #0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 f9ff 	bl	8002acc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0202 	orr.w	r2, r2, #2
 80026dc:	60da      	str	r2, [r3, #12]
      break;
 80026de:	e02e      	b.n	800273e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2201      	movs	r2, #1
 80026e6:	2104      	movs	r1, #4
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 f9ef 	bl	8002acc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0204 	orr.w	r2, r2, #4
 80026fc:	60da      	str	r2, [r3, #12]
      break;
 80026fe:	e01e      	b.n	800273e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2201      	movs	r2, #1
 8002706:	2100      	movs	r1, #0
 8002708:	4618      	mov	r0, r3
 800270a:	f000 f9df 	bl	8002acc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2201      	movs	r2, #1
 8002714:	2104      	movs	r1, #4
 8002716:	4618      	mov	r0, r3
 8002718:	f000 f9d8 	bl	8002acc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0202 	orr.w	r2, r2, #2
 800272a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0204 	orr.w	r2, r2, #4
 800273a:	60da      	str	r2, [r3, #12]
      break;
 800273c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0201 	orr.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b02      	cmp	r3, #2
 800276c:	d122      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b02      	cmp	r3, #2
 800277a:	d11b      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f06f 0202 	mvn.w	r2, #2
 8002784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f8f8 	bl	8002990 <HAL_TIM_IC_CaptureCallback>
 80027a0:	e005      	b.n	80027ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f8ea 	bl	800297c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f8fb 	bl	80029a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d122      	bne.n	8002808 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d11b      	bne.n	8002808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0204 	mvn.w	r2, #4
 80027d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2202      	movs	r2, #2
 80027de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f8ce 	bl	8002990 <HAL_TIM_IC_CaptureCallback>
 80027f4:	e005      	b.n	8002802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f8c0 	bl	800297c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f8d1 	bl	80029a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b08      	cmp	r3, #8
 8002814:	d122      	bne.n	800285c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b08      	cmp	r3, #8
 8002822:	d11b      	bne.n	800285c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0208 	mvn.w	r2, #8
 800282c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2204      	movs	r2, #4
 8002832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f8a4 	bl	8002990 <HAL_TIM_IC_CaptureCallback>
 8002848:	e005      	b.n	8002856 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f896 	bl	800297c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f8a7 	bl	80029a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b10      	cmp	r3, #16
 8002868:	d122      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	2b10      	cmp	r3, #16
 8002876:	d11b      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0210 	mvn.w	r2, #16
 8002880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2208      	movs	r2, #8
 8002886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f87a 	bl	8002990 <HAL_TIM_IC_CaptureCallback>
 800289c:	e005      	b.n	80028aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f86c 	bl	800297c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f87d 	bl	80029a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d10e      	bne.n	80028dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d107      	bne.n	80028dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0201 	mvn.w	r2, #1
 80028d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f846 	bl	8002968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e6:	2b80      	cmp	r3, #128	; 0x80
 80028e8:	d10e      	bne.n	8002908 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f4:	2b80      	cmp	r3, #128	; 0x80
 80028f6:	d107      	bne.n	8002908 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f980 	bl	8002c08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002912:	2b40      	cmp	r3, #64	; 0x40
 8002914:	d10e      	bne.n	8002934 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002920:	2b40      	cmp	r3, #64	; 0x40
 8002922:	d107      	bne.n	8002934 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800292c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f842 	bl	80029b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f003 0320 	and.w	r3, r3, #32
 800293e:	2b20      	cmp	r3, #32
 8002940:	d10e      	bne.n	8002960 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b20      	cmp	r3, #32
 800294e:	d107      	bne.n	8002960 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0220 	mvn.w	r2, #32
 8002958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f94a 	bl	8002bf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a34      	ldr	r2, [pc, #208]	; (8002ab0 <TIM_Base_SetConfig+0xe4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d00f      	beq.n	8002a04 <TIM_Base_SetConfig+0x38>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ea:	d00b      	beq.n	8002a04 <TIM_Base_SetConfig+0x38>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a31      	ldr	r2, [pc, #196]	; (8002ab4 <TIM_Base_SetConfig+0xe8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d007      	beq.n	8002a04 <TIM_Base_SetConfig+0x38>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a30      	ldr	r2, [pc, #192]	; (8002ab8 <TIM_Base_SetConfig+0xec>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d003      	beq.n	8002a04 <TIM_Base_SetConfig+0x38>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a2f      	ldr	r2, [pc, #188]	; (8002abc <TIM_Base_SetConfig+0xf0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d108      	bne.n	8002a16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a25      	ldr	r2, [pc, #148]	; (8002ab0 <TIM_Base_SetConfig+0xe4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d01b      	beq.n	8002a56 <TIM_Base_SetConfig+0x8a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a24:	d017      	beq.n	8002a56 <TIM_Base_SetConfig+0x8a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a22      	ldr	r2, [pc, #136]	; (8002ab4 <TIM_Base_SetConfig+0xe8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <TIM_Base_SetConfig+0x8a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a21      	ldr	r2, [pc, #132]	; (8002ab8 <TIM_Base_SetConfig+0xec>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00f      	beq.n	8002a56 <TIM_Base_SetConfig+0x8a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a20      	ldr	r2, [pc, #128]	; (8002abc <TIM_Base_SetConfig+0xf0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00b      	beq.n	8002a56 <TIM_Base_SetConfig+0x8a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a1f      	ldr	r2, [pc, #124]	; (8002ac0 <TIM_Base_SetConfig+0xf4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d007      	beq.n	8002a56 <TIM_Base_SetConfig+0x8a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a1e      	ldr	r2, [pc, #120]	; (8002ac4 <TIM_Base_SetConfig+0xf8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d003      	beq.n	8002a56 <TIM_Base_SetConfig+0x8a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a1d      	ldr	r2, [pc, #116]	; (8002ac8 <TIM_Base_SetConfig+0xfc>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d108      	bne.n	8002a68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a08      	ldr	r2, [pc, #32]	; (8002ab0 <TIM_Base_SetConfig+0xe4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d103      	bne.n	8002a9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	615a      	str	r2, [r3, #20]
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40010000 	.word	0x40010000
 8002ab4:	40000400 	.word	0x40000400
 8002ab8:	40000800 	.word	0x40000800
 8002abc:	40000c00 	.word	0x40000c00
 8002ac0:	40014000 	.word	0x40014000
 8002ac4:	40014400 	.word	0x40014400
 8002ac8:	40014800 	.word	0x40014800

08002acc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	2201      	movs	r2, #1
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a1a      	ldr	r2, [r3, #32]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	401a      	ands	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a1a      	ldr	r2, [r3, #32]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f003 031f 	and.w	r3, r3, #31
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	fa01 f303 	lsl.w	r3, r1, r3
 8002b04:	431a      	orrs	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	621a      	str	r2, [r3, #32]
}
 8002b0a:	bf00      	nop
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e050      	b.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a1c      	ldr	r2, [pc, #112]	; (8002be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d018      	beq.n	8002ba6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7c:	d013      	beq.n	8002ba6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a18      	ldr	r2, [pc, #96]	; (8002be4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d00e      	beq.n	8002ba6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a16      	ldr	r2, [pc, #88]	; (8002be8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d009      	beq.n	8002ba6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a15      	ldr	r2, [pc, #84]	; (8002bec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d004      	beq.n	8002ba6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a13      	ldr	r2, [pc, #76]	; (8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40010000 	.word	0x40010000
 8002be4:	40000400 	.word	0x40000400
 8002be8:	40000800 	.word	0x40000800
 8002bec:	40000c00 	.word	0x40000c00
 8002bf0:	40014000 	.word	0x40014000

08002bf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e03f      	b.n	8002cae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7fe fb68 	bl	8001318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2224      	movs	r2, #36	; 0x24
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f929 	bl	8002eb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b08a      	sub	sp, #40	; 0x28
 8002cba:	af02      	add	r7, sp, #8
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b20      	cmp	r3, #32
 8002cd4:	d17c      	bne.n	8002dd0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <HAL_UART_Transmit+0x2c>
 8002cdc:	88fb      	ldrh	r3, [r7, #6]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e075      	b.n	8002dd2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_UART_Transmit+0x3e>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e06e      	b.n	8002dd2 <HAL_UART_Transmit+0x11c>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2221      	movs	r2, #33	; 0x21
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d0a:	f7fe fc59 	bl	80015c0 <HAL_GetTick>
 8002d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	88fa      	ldrh	r2, [r7, #6]
 8002d14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	88fa      	ldrh	r2, [r7, #6]
 8002d1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d24:	d108      	bne.n	8002d38 <HAL_UART_Transmit+0x82>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d104      	bne.n	8002d38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	e003      	b.n	8002d40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d48:	e02a      	b.n	8002da0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2200      	movs	r2, #0
 8002d52:	2180      	movs	r1, #128	; 0x80
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 f840 	bl	8002dda <UART_WaitOnFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e036      	b.n	8002dd2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10b      	bne.n	8002d82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	e007      	b.n	8002d92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	781a      	ldrb	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1cf      	bne.n	8002d4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2200      	movs	r2, #0
 8002db2:	2140      	movs	r1, #64	; 0x40
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 f810 	bl	8002dda <UART_WaitOnFlagUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e006      	b.n	8002dd2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	e000      	b.n	8002dd2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002dd0:	2302      	movs	r3, #2
  }
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3720      	adds	r7, #32
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b090      	sub	sp, #64	; 0x40
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	603b      	str	r3, [r7, #0]
 8002de6:	4613      	mov	r3, r2
 8002de8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dea:	e050      	b.n	8002e8e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002df2:	d04c      	beq.n	8002e8e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d007      	beq.n	8002e0a <UART_WaitOnFlagUntilTimeout+0x30>
 8002dfa:	f7fe fbe1 	bl	80015c0 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d241      	bcs.n	8002e8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	330c      	adds	r3, #12
 8002e10:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e14:	e853 3f00 	ldrex	r3, [r3]
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	330c      	adds	r3, #12
 8002e28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e2a:	637a      	str	r2, [r7, #52]	; 0x34
 8002e2c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e32:	e841 2300 	strex	r3, r2, [r1]
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1e5      	bne.n	8002e0a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	3314      	adds	r3, #20
 8002e44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	e853 3f00 	ldrex	r3, [r3]
 8002e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3314      	adds	r3, #20
 8002e5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e5e:	623a      	str	r2, [r7, #32]
 8002e60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e62:	69f9      	ldr	r1, [r7, #28]
 8002e64:	6a3a      	ldr	r2, [r7, #32]
 8002e66:	e841 2300 	strex	r3, r2, [r1]
 8002e6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1e5      	bne.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e00f      	b.n	8002eae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4013      	ands	r3, r2
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	bf0c      	ite	eq
 8002e9e:	2301      	moveq	r3, #1
 8002ea0:	2300      	movne	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d09f      	beq.n	8002dec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3740      	adds	r7, #64	; 0x40
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ebc:	b0c0      	sub	sp, #256	; 0x100
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed4:	68d9      	ldr	r1, [r3, #12]
 8002ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	ea40 0301 	orr.w	r3, r0, r1
 8002ee0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f10:	f021 010c 	bic.w	r1, r1, #12
 8002f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f1e:	430b      	orrs	r3, r1
 8002f20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f32:	6999      	ldr	r1, [r3, #24]
 8002f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	ea40 0301 	orr.w	r3, r0, r1
 8002f3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	4b8f      	ldr	r3, [pc, #572]	; (8003184 <UART_SetConfig+0x2cc>)
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d005      	beq.n	8002f58 <UART_SetConfig+0xa0>
 8002f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	4b8d      	ldr	r3, [pc, #564]	; (8003188 <UART_SetConfig+0x2d0>)
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d104      	bne.n	8002f62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f58:	f7ff fa96 	bl	8002488 <HAL_RCC_GetPCLK2Freq>
 8002f5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f60:	e003      	b.n	8002f6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f62:	f7ff fa7d 	bl	8002460 <HAL_RCC_GetPCLK1Freq>
 8002f66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f74:	f040 810c 	bne.w	8003190 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f8a:	4622      	mov	r2, r4
 8002f8c:	462b      	mov	r3, r5
 8002f8e:	1891      	adds	r1, r2, r2
 8002f90:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f92:	415b      	adcs	r3, r3
 8002f94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	eb12 0801 	adds.w	r8, r2, r1
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	eb43 0901 	adc.w	r9, r3, r1
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fba:	4690      	mov	r8, r2
 8002fbc:	4699      	mov	r9, r3
 8002fbe:	4623      	mov	r3, r4
 8002fc0:	eb18 0303 	adds.w	r3, r8, r3
 8002fc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002fc8:	462b      	mov	r3, r5
 8002fca:	eb49 0303 	adc.w	r3, r9, r3
 8002fce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fde:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002fe2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	18db      	adds	r3, r3, r3
 8002fea:	653b      	str	r3, [r7, #80]	; 0x50
 8002fec:	4613      	mov	r3, r2
 8002fee:	eb42 0303 	adc.w	r3, r2, r3
 8002ff2:	657b      	str	r3, [r7, #84]	; 0x54
 8002ff4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ff8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ffc:	f7fd fd36 	bl	8000a6c <__aeabi_uldivmod>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4b61      	ldr	r3, [pc, #388]	; (800318c <UART_SetConfig+0x2d4>)
 8003006:	fba3 2302 	umull	r2, r3, r3, r2
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	011c      	lsls	r4, r3, #4
 800300e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003012:	2200      	movs	r2, #0
 8003014:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003018:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800301c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003020:	4642      	mov	r2, r8
 8003022:	464b      	mov	r3, r9
 8003024:	1891      	adds	r1, r2, r2
 8003026:	64b9      	str	r1, [r7, #72]	; 0x48
 8003028:	415b      	adcs	r3, r3
 800302a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800302c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003030:	4641      	mov	r1, r8
 8003032:	eb12 0a01 	adds.w	sl, r2, r1
 8003036:	4649      	mov	r1, r9
 8003038:	eb43 0b01 	adc.w	fp, r3, r1
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003048:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800304c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003050:	4692      	mov	sl, r2
 8003052:	469b      	mov	fp, r3
 8003054:	4643      	mov	r3, r8
 8003056:	eb1a 0303 	adds.w	r3, sl, r3
 800305a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800305e:	464b      	mov	r3, r9
 8003060:	eb4b 0303 	adc.w	r3, fp, r3
 8003064:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003074:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003078:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800307c:	460b      	mov	r3, r1
 800307e:	18db      	adds	r3, r3, r3
 8003080:	643b      	str	r3, [r7, #64]	; 0x40
 8003082:	4613      	mov	r3, r2
 8003084:	eb42 0303 	adc.w	r3, r2, r3
 8003088:	647b      	str	r3, [r7, #68]	; 0x44
 800308a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800308e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003092:	f7fd fceb 	bl	8000a6c <__aeabi_uldivmod>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4611      	mov	r1, r2
 800309c:	4b3b      	ldr	r3, [pc, #236]	; (800318c <UART_SetConfig+0x2d4>)
 800309e:	fba3 2301 	umull	r2, r3, r3, r1
 80030a2:	095b      	lsrs	r3, r3, #5
 80030a4:	2264      	movs	r2, #100	; 0x64
 80030a6:	fb02 f303 	mul.w	r3, r2, r3
 80030aa:	1acb      	subs	r3, r1, r3
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030b2:	4b36      	ldr	r3, [pc, #216]	; (800318c <UART_SetConfig+0x2d4>)
 80030b4:	fba3 2302 	umull	r2, r3, r3, r2
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030c0:	441c      	add	r4, r3
 80030c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030c6:	2200      	movs	r2, #0
 80030c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030d4:	4642      	mov	r2, r8
 80030d6:	464b      	mov	r3, r9
 80030d8:	1891      	adds	r1, r2, r2
 80030da:	63b9      	str	r1, [r7, #56]	; 0x38
 80030dc:	415b      	adcs	r3, r3
 80030de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030e4:	4641      	mov	r1, r8
 80030e6:	1851      	adds	r1, r2, r1
 80030e8:	6339      	str	r1, [r7, #48]	; 0x30
 80030ea:	4649      	mov	r1, r9
 80030ec:	414b      	adcs	r3, r1
 80030ee:	637b      	str	r3, [r7, #52]	; 0x34
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030fc:	4659      	mov	r1, fp
 80030fe:	00cb      	lsls	r3, r1, #3
 8003100:	4651      	mov	r1, sl
 8003102:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003106:	4651      	mov	r1, sl
 8003108:	00ca      	lsls	r2, r1, #3
 800310a:	4610      	mov	r0, r2
 800310c:	4619      	mov	r1, r3
 800310e:	4603      	mov	r3, r0
 8003110:	4642      	mov	r2, r8
 8003112:	189b      	adds	r3, r3, r2
 8003114:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003118:	464b      	mov	r3, r9
 800311a:	460a      	mov	r2, r1
 800311c:	eb42 0303 	adc.w	r3, r2, r3
 8003120:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003130:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003134:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003138:	460b      	mov	r3, r1
 800313a:	18db      	adds	r3, r3, r3
 800313c:	62bb      	str	r3, [r7, #40]	; 0x28
 800313e:	4613      	mov	r3, r2
 8003140:	eb42 0303 	adc.w	r3, r2, r3
 8003144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003146:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800314a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800314e:	f7fd fc8d 	bl	8000a6c <__aeabi_uldivmod>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4b0d      	ldr	r3, [pc, #52]	; (800318c <UART_SetConfig+0x2d4>)
 8003158:	fba3 1302 	umull	r1, r3, r3, r2
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	2164      	movs	r1, #100	; 0x64
 8003160:	fb01 f303 	mul.w	r3, r1, r3
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	3332      	adds	r3, #50	; 0x32
 800316a:	4a08      	ldr	r2, [pc, #32]	; (800318c <UART_SetConfig+0x2d4>)
 800316c:	fba2 2303 	umull	r2, r3, r2, r3
 8003170:	095b      	lsrs	r3, r3, #5
 8003172:	f003 0207 	and.w	r2, r3, #7
 8003176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4422      	add	r2, r4
 800317e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003180:	e105      	b.n	800338e <UART_SetConfig+0x4d6>
 8003182:	bf00      	nop
 8003184:	40011000 	.word	0x40011000
 8003188:	40011400 	.word	0x40011400
 800318c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003194:	2200      	movs	r2, #0
 8003196:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800319a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800319e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031a2:	4642      	mov	r2, r8
 80031a4:	464b      	mov	r3, r9
 80031a6:	1891      	adds	r1, r2, r2
 80031a8:	6239      	str	r1, [r7, #32]
 80031aa:	415b      	adcs	r3, r3
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
 80031ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031b2:	4641      	mov	r1, r8
 80031b4:	1854      	adds	r4, r2, r1
 80031b6:	4649      	mov	r1, r9
 80031b8:	eb43 0501 	adc.w	r5, r3, r1
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	00eb      	lsls	r3, r5, #3
 80031c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ca:	00e2      	lsls	r2, r4, #3
 80031cc:	4614      	mov	r4, r2
 80031ce:	461d      	mov	r5, r3
 80031d0:	4643      	mov	r3, r8
 80031d2:	18e3      	adds	r3, r4, r3
 80031d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031d8:	464b      	mov	r3, r9
 80031da:	eb45 0303 	adc.w	r3, r5, r3
 80031de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031fe:	4629      	mov	r1, r5
 8003200:	008b      	lsls	r3, r1, #2
 8003202:	4621      	mov	r1, r4
 8003204:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003208:	4621      	mov	r1, r4
 800320a:	008a      	lsls	r2, r1, #2
 800320c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003210:	f7fd fc2c 	bl	8000a6c <__aeabi_uldivmod>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4b60      	ldr	r3, [pc, #384]	; (800339c <UART_SetConfig+0x4e4>)
 800321a:	fba3 2302 	umull	r2, r3, r3, r2
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	011c      	lsls	r4, r3, #4
 8003222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003226:	2200      	movs	r2, #0
 8003228:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800322c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003230:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003234:	4642      	mov	r2, r8
 8003236:	464b      	mov	r3, r9
 8003238:	1891      	adds	r1, r2, r2
 800323a:	61b9      	str	r1, [r7, #24]
 800323c:	415b      	adcs	r3, r3
 800323e:	61fb      	str	r3, [r7, #28]
 8003240:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003244:	4641      	mov	r1, r8
 8003246:	1851      	adds	r1, r2, r1
 8003248:	6139      	str	r1, [r7, #16]
 800324a:	4649      	mov	r1, r9
 800324c:	414b      	adcs	r3, r1
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800325c:	4659      	mov	r1, fp
 800325e:	00cb      	lsls	r3, r1, #3
 8003260:	4651      	mov	r1, sl
 8003262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003266:	4651      	mov	r1, sl
 8003268:	00ca      	lsls	r2, r1, #3
 800326a:	4610      	mov	r0, r2
 800326c:	4619      	mov	r1, r3
 800326e:	4603      	mov	r3, r0
 8003270:	4642      	mov	r2, r8
 8003272:	189b      	adds	r3, r3, r2
 8003274:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003278:	464b      	mov	r3, r9
 800327a:	460a      	mov	r2, r1
 800327c:	eb42 0303 	adc.w	r3, r2, r3
 8003280:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	67bb      	str	r3, [r7, #120]	; 0x78
 800328e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800329c:	4649      	mov	r1, r9
 800329e:	008b      	lsls	r3, r1, #2
 80032a0:	4641      	mov	r1, r8
 80032a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032a6:	4641      	mov	r1, r8
 80032a8:	008a      	lsls	r2, r1, #2
 80032aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032ae:	f7fd fbdd 	bl	8000a6c <__aeabi_uldivmod>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	4b39      	ldr	r3, [pc, #228]	; (800339c <UART_SetConfig+0x4e4>)
 80032b8:	fba3 1302 	umull	r1, r3, r3, r2
 80032bc:	095b      	lsrs	r3, r3, #5
 80032be:	2164      	movs	r1, #100	; 0x64
 80032c0:	fb01 f303 	mul.w	r3, r1, r3
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	3332      	adds	r3, #50	; 0x32
 80032ca:	4a34      	ldr	r2, [pc, #208]	; (800339c <UART_SetConfig+0x4e4>)
 80032cc:	fba2 2303 	umull	r2, r3, r2, r3
 80032d0:	095b      	lsrs	r3, r3, #5
 80032d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032d6:	441c      	add	r4, r3
 80032d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032dc:	2200      	movs	r2, #0
 80032de:	673b      	str	r3, [r7, #112]	; 0x70
 80032e0:	677a      	str	r2, [r7, #116]	; 0x74
 80032e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80032e6:	4642      	mov	r2, r8
 80032e8:	464b      	mov	r3, r9
 80032ea:	1891      	adds	r1, r2, r2
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	415b      	adcs	r3, r3
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032f6:	4641      	mov	r1, r8
 80032f8:	1851      	adds	r1, r2, r1
 80032fa:	6039      	str	r1, [r7, #0]
 80032fc:	4649      	mov	r1, r9
 80032fe:	414b      	adcs	r3, r1
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800330e:	4659      	mov	r1, fp
 8003310:	00cb      	lsls	r3, r1, #3
 8003312:	4651      	mov	r1, sl
 8003314:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003318:	4651      	mov	r1, sl
 800331a:	00ca      	lsls	r2, r1, #3
 800331c:	4610      	mov	r0, r2
 800331e:	4619      	mov	r1, r3
 8003320:	4603      	mov	r3, r0
 8003322:	4642      	mov	r2, r8
 8003324:	189b      	adds	r3, r3, r2
 8003326:	66bb      	str	r3, [r7, #104]	; 0x68
 8003328:	464b      	mov	r3, r9
 800332a:	460a      	mov	r2, r1
 800332c:	eb42 0303 	adc.w	r3, r2, r3
 8003330:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	663b      	str	r3, [r7, #96]	; 0x60
 800333c:	667a      	str	r2, [r7, #100]	; 0x64
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800334a:	4649      	mov	r1, r9
 800334c:	008b      	lsls	r3, r1, #2
 800334e:	4641      	mov	r1, r8
 8003350:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003354:	4641      	mov	r1, r8
 8003356:	008a      	lsls	r2, r1, #2
 8003358:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800335c:	f7fd fb86 	bl	8000a6c <__aeabi_uldivmod>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4b0d      	ldr	r3, [pc, #52]	; (800339c <UART_SetConfig+0x4e4>)
 8003366:	fba3 1302 	umull	r1, r3, r3, r2
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	2164      	movs	r1, #100	; 0x64
 800336e:	fb01 f303 	mul.w	r3, r1, r3
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	3332      	adds	r3, #50	; 0x32
 8003378:	4a08      	ldr	r2, [pc, #32]	; (800339c <UART_SetConfig+0x4e4>)
 800337a:	fba2 2303 	umull	r2, r3, r2, r3
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	f003 020f 	and.w	r2, r3, #15
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4422      	add	r2, r4
 800338c:	609a      	str	r2, [r3, #8]
}
 800338e:	bf00      	nop
 8003390:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003394:	46bd      	mov	sp, r7
 8003396:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800339a:	bf00      	nop
 800339c:	51eb851f 	.word	0x51eb851f

080033a0 <__errno>:
 80033a0:	4b01      	ldr	r3, [pc, #4]	; (80033a8 <__errno+0x8>)
 80033a2:	6818      	ldr	r0, [r3, #0]
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	2000000c 	.word	0x2000000c

080033ac <__libc_init_array>:
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	4d0d      	ldr	r5, [pc, #52]	; (80033e4 <__libc_init_array+0x38>)
 80033b0:	4c0d      	ldr	r4, [pc, #52]	; (80033e8 <__libc_init_array+0x3c>)
 80033b2:	1b64      	subs	r4, r4, r5
 80033b4:	10a4      	asrs	r4, r4, #2
 80033b6:	2600      	movs	r6, #0
 80033b8:	42a6      	cmp	r6, r4
 80033ba:	d109      	bne.n	80033d0 <__libc_init_array+0x24>
 80033bc:	4d0b      	ldr	r5, [pc, #44]	; (80033ec <__libc_init_array+0x40>)
 80033be:	4c0c      	ldr	r4, [pc, #48]	; (80033f0 <__libc_init_array+0x44>)
 80033c0:	f000 fc8e 	bl	8003ce0 <_init>
 80033c4:	1b64      	subs	r4, r4, r5
 80033c6:	10a4      	asrs	r4, r4, #2
 80033c8:	2600      	movs	r6, #0
 80033ca:	42a6      	cmp	r6, r4
 80033cc:	d105      	bne.n	80033da <__libc_init_array+0x2e>
 80033ce:	bd70      	pop	{r4, r5, r6, pc}
 80033d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d4:	4798      	blx	r3
 80033d6:	3601      	adds	r6, #1
 80033d8:	e7ee      	b.n	80033b8 <__libc_init_array+0xc>
 80033da:	f855 3b04 	ldr.w	r3, [r5], #4
 80033de:	4798      	blx	r3
 80033e0:	3601      	adds	r6, #1
 80033e2:	e7f2      	b.n	80033ca <__libc_init_array+0x1e>
 80033e4:	08003d64 	.word	0x08003d64
 80033e8:	08003d64 	.word	0x08003d64
 80033ec:	08003d64 	.word	0x08003d64
 80033f0:	08003d68 	.word	0x08003d68

080033f4 <memset>:
 80033f4:	4402      	add	r2, r0
 80033f6:	4603      	mov	r3, r0
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d100      	bne.n	80033fe <memset+0xa>
 80033fc:	4770      	bx	lr
 80033fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003402:	e7f9      	b.n	80033f8 <memset+0x4>

08003404 <siprintf>:
 8003404:	b40e      	push	{r1, r2, r3}
 8003406:	b500      	push	{lr}
 8003408:	b09c      	sub	sp, #112	; 0x70
 800340a:	ab1d      	add	r3, sp, #116	; 0x74
 800340c:	9002      	str	r0, [sp, #8]
 800340e:	9006      	str	r0, [sp, #24]
 8003410:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003414:	4809      	ldr	r0, [pc, #36]	; (800343c <siprintf+0x38>)
 8003416:	9107      	str	r1, [sp, #28]
 8003418:	9104      	str	r1, [sp, #16]
 800341a:	4909      	ldr	r1, [pc, #36]	; (8003440 <siprintf+0x3c>)
 800341c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003420:	9105      	str	r1, [sp, #20]
 8003422:	6800      	ldr	r0, [r0, #0]
 8003424:	9301      	str	r3, [sp, #4]
 8003426:	a902      	add	r1, sp, #8
 8003428:	f000 f868 	bl	80034fc <_svfiprintf_r>
 800342c:	9b02      	ldr	r3, [sp, #8]
 800342e:	2200      	movs	r2, #0
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	b01c      	add	sp, #112	; 0x70
 8003434:	f85d eb04 	ldr.w	lr, [sp], #4
 8003438:	b003      	add	sp, #12
 800343a:	4770      	bx	lr
 800343c:	2000000c 	.word	0x2000000c
 8003440:	ffff0208 	.word	0xffff0208

08003444 <__ssputs_r>:
 8003444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003448:	688e      	ldr	r6, [r1, #8]
 800344a:	429e      	cmp	r6, r3
 800344c:	4682      	mov	sl, r0
 800344e:	460c      	mov	r4, r1
 8003450:	4690      	mov	r8, r2
 8003452:	461f      	mov	r7, r3
 8003454:	d838      	bhi.n	80034c8 <__ssputs_r+0x84>
 8003456:	898a      	ldrh	r2, [r1, #12]
 8003458:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800345c:	d032      	beq.n	80034c4 <__ssputs_r+0x80>
 800345e:	6825      	ldr	r5, [r4, #0]
 8003460:	6909      	ldr	r1, [r1, #16]
 8003462:	eba5 0901 	sub.w	r9, r5, r1
 8003466:	6965      	ldr	r5, [r4, #20]
 8003468:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800346c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003470:	3301      	adds	r3, #1
 8003472:	444b      	add	r3, r9
 8003474:	106d      	asrs	r5, r5, #1
 8003476:	429d      	cmp	r5, r3
 8003478:	bf38      	it	cc
 800347a:	461d      	movcc	r5, r3
 800347c:	0553      	lsls	r3, r2, #21
 800347e:	d531      	bpl.n	80034e4 <__ssputs_r+0xa0>
 8003480:	4629      	mov	r1, r5
 8003482:	f000 fb63 	bl	8003b4c <_malloc_r>
 8003486:	4606      	mov	r6, r0
 8003488:	b950      	cbnz	r0, 80034a0 <__ssputs_r+0x5c>
 800348a:	230c      	movs	r3, #12
 800348c:	f8ca 3000 	str.w	r3, [sl]
 8003490:	89a3      	ldrh	r3, [r4, #12]
 8003492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003496:	81a3      	strh	r3, [r4, #12]
 8003498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800349c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034a0:	6921      	ldr	r1, [r4, #16]
 80034a2:	464a      	mov	r2, r9
 80034a4:	f000 fabe 	bl	8003a24 <memcpy>
 80034a8:	89a3      	ldrh	r3, [r4, #12]
 80034aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80034ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b2:	81a3      	strh	r3, [r4, #12]
 80034b4:	6126      	str	r6, [r4, #16]
 80034b6:	6165      	str	r5, [r4, #20]
 80034b8:	444e      	add	r6, r9
 80034ba:	eba5 0509 	sub.w	r5, r5, r9
 80034be:	6026      	str	r6, [r4, #0]
 80034c0:	60a5      	str	r5, [r4, #8]
 80034c2:	463e      	mov	r6, r7
 80034c4:	42be      	cmp	r6, r7
 80034c6:	d900      	bls.n	80034ca <__ssputs_r+0x86>
 80034c8:	463e      	mov	r6, r7
 80034ca:	6820      	ldr	r0, [r4, #0]
 80034cc:	4632      	mov	r2, r6
 80034ce:	4641      	mov	r1, r8
 80034d0:	f000 fab6 	bl	8003a40 <memmove>
 80034d4:	68a3      	ldr	r3, [r4, #8]
 80034d6:	1b9b      	subs	r3, r3, r6
 80034d8:	60a3      	str	r3, [r4, #8]
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	4433      	add	r3, r6
 80034de:	6023      	str	r3, [r4, #0]
 80034e0:	2000      	movs	r0, #0
 80034e2:	e7db      	b.n	800349c <__ssputs_r+0x58>
 80034e4:	462a      	mov	r2, r5
 80034e6:	f000 fba5 	bl	8003c34 <_realloc_r>
 80034ea:	4606      	mov	r6, r0
 80034ec:	2800      	cmp	r0, #0
 80034ee:	d1e1      	bne.n	80034b4 <__ssputs_r+0x70>
 80034f0:	6921      	ldr	r1, [r4, #16]
 80034f2:	4650      	mov	r0, sl
 80034f4:	f000 fabe 	bl	8003a74 <_free_r>
 80034f8:	e7c7      	b.n	800348a <__ssputs_r+0x46>
	...

080034fc <_svfiprintf_r>:
 80034fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003500:	4698      	mov	r8, r3
 8003502:	898b      	ldrh	r3, [r1, #12]
 8003504:	061b      	lsls	r3, r3, #24
 8003506:	b09d      	sub	sp, #116	; 0x74
 8003508:	4607      	mov	r7, r0
 800350a:	460d      	mov	r5, r1
 800350c:	4614      	mov	r4, r2
 800350e:	d50e      	bpl.n	800352e <_svfiprintf_r+0x32>
 8003510:	690b      	ldr	r3, [r1, #16]
 8003512:	b963      	cbnz	r3, 800352e <_svfiprintf_r+0x32>
 8003514:	2140      	movs	r1, #64	; 0x40
 8003516:	f000 fb19 	bl	8003b4c <_malloc_r>
 800351a:	6028      	str	r0, [r5, #0]
 800351c:	6128      	str	r0, [r5, #16]
 800351e:	b920      	cbnz	r0, 800352a <_svfiprintf_r+0x2e>
 8003520:	230c      	movs	r3, #12
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003528:	e0d1      	b.n	80036ce <_svfiprintf_r+0x1d2>
 800352a:	2340      	movs	r3, #64	; 0x40
 800352c:	616b      	str	r3, [r5, #20]
 800352e:	2300      	movs	r3, #0
 8003530:	9309      	str	r3, [sp, #36]	; 0x24
 8003532:	2320      	movs	r3, #32
 8003534:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003538:	f8cd 800c 	str.w	r8, [sp, #12]
 800353c:	2330      	movs	r3, #48	; 0x30
 800353e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80036e8 <_svfiprintf_r+0x1ec>
 8003542:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003546:	f04f 0901 	mov.w	r9, #1
 800354a:	4623      	mov	r3, r4
 800354c:	469a      	mov	sl, r3
 800354e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003552:	b10a      	cbz	r2, 8003558 <_svfiprintf_r+0x5c>
 8003554:	2a25      	cmp	r2, #37	; 0x25
 8003556:	d1f9      	bne.n	800354c <_svfiprintf_r+0x50>
 8003558:	ebba 0b04 	subs.w	fp, sl, r4
 800355c:	d00b      	beq.n	8003576 <_svfiprintf_r+0x7a>
 800355e:	465b      	mov	r3, fp
 8003560:	4622      	mov	r2, r4
 8003562:	4629      	mov	r1, r5
 8003564:	4638      	mov	r0, r7
 8003566:	f7ff ff6d 	bl	8003444 <__ssputs_r>
 800356a:	3001      	adds	r0, #1
 800356c:	f000 80aa 	beq.w	80036c4 <_svfiprintf_r+0x1c8>
 8003570:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003572:	445a      	add	r2, fp
 8003574:	9209      	str	r2, [sp, #36]	; 0x24
 8003576:	f89a 3000 	ldrb.w	r3, [sl]
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 80a2 	beq.w	80036c4 <_svfiprintf_r+0x1c8>
 8003580:	2300      	movs	r3, #0
 8003582:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003586:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800358a:	f10a 0a01 	add.w	sl, sl, #1
 800358e:	9304      	str	r3, [sp, #16]
 8003590:	9307      	str	r3, [sp, #28]
 8003592:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003596:	931a      	str	r3, [sp, #104]	; 0x68
 8003598:	4654      	mov	r4, sl
 800359a:	2205      	movs	r2, #5
 800359c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035a0:	4851      	ldr	r0, [pc, #324]	; (80036e8 <_svfiprintf_r+0x1ec>)
 80035a2:	f7fc fe1d 	bl	80001e0 <memchr>
 80035a6:	9a04      	ldr	r2, [sp, #16]
 80035a8:	b9d8      	cbnz	r0, 80035e2 <_svfiprintf_r+0xe6>
 80035aa:	06d0      	lsls	r0, r2, #27
 80035ac:	bf44      	itt	mi
 80035ae:	2320      	movmi	r3, #32
 80035b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035b4:	0711      	lsls	r1, r2, #28
 80035b6:	bf44      	itt	mi
 80035b8:	232b      	movmi	r3, #43	; 0x2b
 80035ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035be:	f89a 3000 	ldrb.w	r3, [sl]
 80035c2:	2b2a      	cmp	r3, #42	; 0x2a
 80035c4:	d015      	beq.n	80035f2 <_svfiprintf_r+0xf6>
 80035c6:	9a07      	ldr	r2, [sp, #28]
 80035c8:	4654      	mov	r4, sl
 80035ca:	2000      	movs	r0, #0
 80035cc:	f04f 0c0a 	mov.w	ip, #10
 80035d0:	4621      	mov	r1, r4
 80035d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035d6:	3b30      	subs	r3, #48	; 0x30
 80035d8:	2b09      	cmp	r3, #9
 80035da:	d94e      	bls.n	800367a <_svfiprintf_r+0x17e>
 80035dc:	b1b0      	cbz	r0, 800360c <_svfiprintf_r+0x110>
 80035de:	9207      	str	r2, [sp, #28]
 80035e0:	e014      	b.n	800360c <_svfiprintf_r+0x110>
 80035e2:	eba0 0308 	sub.w	r3, r0, r8
 80035e6:	fa09 f303 	lsl.w	r3, r9, r3
 80035ea:	4313      	orrs	r3, r2
 80035ec:	9304      	str	r3, [sp, #16]
 80035ee:	46a2      	mov	sl, r4
 80035f0:	e7d2      	b.n	8003598 <_svfiprintf_r+0x9c>
 80035f2:	9b03      	ldr	r3, [sp, #12]
 80035f4:	1d19      	adds	r1, r3, #4
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	9103      	str	r1, [sp, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	bfbb      	ittet	lt
 80035fe:	425b      	neglt	r3, r3
 8003600:	f042 0202 	orrlt.w	r2, r2, #2
 8003604:	9307      	strge	r3, [sp, #28]
 8003606:	9307      	strlt	r3, [sp, #28]
 8003608:	bfb8      	it	lt
 800360a:	9204      	strlt	r2, [sp, #16]
 800360c:	7823      	ldrb	r3, [r4, #0]
 800360e:	2b2e      	cmp	r3, #46	; 0x2e
 8003610:	d10c      	bne.n	800362c <_svfiprintf_r+0x130>
 8003612:	7863      	ldrb	r3, [r4, #1]
 8003614:	2b2a      	cmp	r3, #42	; 0x2a
 8003616:	d135      	bne.n	8003684 <_svfiprintf_r+0x188>
 8003618:	9b03      	ldr	r3, [sp, #12]
 800361a:	1d1a      	adds	r2, r3, #4
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	9203      	str	r2, [sp, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	bfb8      	it	lt
 8003624:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003628:	3402      	adds	r4, #2
 800362a:	9305      	str	r3, [sp, #20]
 800362c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80036f8 <_svfiprintf_r+0x1fc>
 8003630:	7821      	ldrb	r1, [r4, #0]
 8003632:	2203      	movs	r2, #3
 8003634:	4650      	mov	r0, sl
 8003636:	f7fc fdd3 	bl	80001e0 <memchr>
 800363a:	b140      	cbz	r0, 800364e <_svfiprintf_r+0x152>
 800363c:	2340      	movs	r3, #64	; 0x40
 800363e:	eba0 000a 	sub.w	r0, r0, sl
 8003642:	fa03 f000 	lsl.w	r0, r3, r0
 8003646:	9b04      	ldr	r3, [sp, #16]
 8003648:	4303      	orrs	r3, r0
 800364a:	3401      	adds	r4, #1
 800364c:	9304      	str	r3, [sp, #16]
 800364e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003652:	4826      	ldr	r0, [pc, #152]	; (80036ec <_svfiprintf_r+0x1f0>)
 8003654:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003658:	2206      	movs	r2, #6
 800365a:	f7fc fdc1 	bl	80001e0 <memchr>
 800365e:	2800      	cmp	r0, #0
 8003660:	d038      	beq.n	80036d4 <_svfiprintf_r+0x1d8>
 8003662:	4b23      	ldr	r3, [pc, #140]	; (80036f0 <_svfiprintf_r+0x1f4>)
 8003664:	bb1b      	cbnz	r3, 80036ae <_svfiprintf_r+0x1b2>
 8003666:	9b03      	ldr	r3, [sp, #12]
 8003668:	3307      	adds	r3, #7
 800366a:	f023 0307 	bic.w	r3, r3, #7
 800366e:	3308      	adds	r3, #8
 8003670:	9303      	str	r3, [sp, #12]
 8003672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003674:	4433      	add	r3, r6
 8003676:	9309      	str	r3, [sp, #36]	; 0x24
 8003678:	e767      	b.n	800354a <_svfiprintf_r+0x4e>
 800367a:	fb0c 3202 	mla	r2, ip, r2, r3
 800367e:	460c      	mov	r4, r1
 8003680:	2001      	movs	r0, #1
 8003682:	e7a5      	b.n	80035d0 <_svfiprintf_r+0xd4>
 8003684:	2300      	movs	r3, #0
 8003686:	3401      	adds	r4, #1
 8003688:	9305      	str	r3, [sp, #20]
 800368a:	4619      	mov	r1, r3
 800368c:	f04f 0c0a 	mov.w	ip, #10
 8003690:	4620      	mov	r0, r4
 8003692:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003696:	3a30      	subs	r2, #48	; 0x30
 8003698:	2a09      	cmp	r2, #9
 800369a:	d903      	bls.n	80036a4 <_svfiprintf_r+0x1a8>
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0c5      	beq.n	800362c <_svfiprintf_r+0x130>
 80036a0:	9105      	str	r1, [sp, #20]
 80036a2:	e7c3      	b.n	800362c <_svfiprintf_r+0x130>
 80036a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80036a8:	4604      	mov	r4, r0
 80036aa:	2301      	movs	r3, #1
 80036ac:	e7f0      	b.n	8003690 <_svfiprintf_r+0x194>
 80036ae:	ab03      	add	r3, sp, #12
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	462a      	mov	r2, r5
 80036b4:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <_svfiprintf_r+0x1f8>)
 80036b6:	a904      	add	r1, sp, #16
 80036b8:	4638      	mov	r0, r7
 80036ba:	f3af 8000 	nop.w
 80036be:	1c42      	adds	r2, r0, #1
 80036c0:	4606      	mov	r6, r0
 80036c2:	d1d6      	bne.n	8003672 <_svfiprintf_r+0x176>
 80036c4:	89ab      	ldrh	r3, [r5, #12]
 80036c6:	065b      	lsls	r3, r3, #25
 80036c8:	f53f af2c 	bmi.w	8003524 <_svfiprintf_r+0x28>
 80036cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036ce:	b01d      	add	sp, #116	; 0x74
 80036d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036d4:	ab03      	add	r3, sp, #12
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	462a      	mov	r2, r5
 80036da:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <_svfiprintf_r+0x1f8>)
 80036dc:	a904      	add	r1, sp, #16
 80036de:	4638      	mov	r0, r7
 80036e0:	f000 f87a 	bl	80037d8 <_printf_i>
 80036e4:	e7eb      	b.n	80036be <_svfiprintf_r+0x1c2>
 80036e6:	bf00      	nop
 80036e8:	08003d28 	.word	0x08003d28
 80036ec:	08003d32 	.word	0x08003d32
 80036f0:	00000000 	.word	0x00000000
 80036f4:	08003445 	.word	0x08003445
 80036f8:	08003d2e 	.word	0x08003d2e

080036fc <_printf_common>:
 80036fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003700:	4616      	mov	r6, r2
 8003702:	4699      	mov	r9, r3
 8003704:	688a      	ldr	r2, [r1, #8]
 8003706:	690b      	ldr	r3, [r1, #16]
 8003708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800370c:	4293      	cmp	r3, r2
 800370e:	bfb8      	it	lt
 8003710:	4613      	movlt	r3, r2
 8003712:	6033      	str	r3, [r6, #0]
 8003714:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003718:	4607      	mov	r7, r0
 800371a:	460c      	mov	r4, r1
 800371c:	b10a      	cbz	r2, 8003722 <_printf_common+0x26>
 800371e:	3301      	adds	r3, #1
 8003720:	6033      	str	r3, [r6, #0]
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	0699      	lsls	r1, r3, #26
 8003726:	bf42      	ittt	mi
 8003728:	6833      	ldrmi	r3, [r6, #0]
 800372a:	3302      	addmi	r3, #2
 800372c:	6033      	strmi	r3, [r6, #0]
 800372e:	6825      	ldr	r5, [r4, #0]
 8003730:	f015 0506 	ands.w	r5, r5, #6
 8003734:	d106      	bne.n	8003744 <_printf_common+0x48>
 8003736:	f104 0a19 	add.w	sl, r4, #25
 800373a:	68e3      	ldr	r3, [r4, #12]
 800373c:	6832      	ldr	r2, [r6, #0]
 800373e:	1a9b      	subs	r3, r3, r2
 8003740:	42ab      	cmp	r3, r5
 8003742:	dc26      	bgt.n	8003792 <_printf_common+0x96>
 8003744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003748:	1e13      	subs	r3, r2, #0
 800374a:	6822      	ldr	r2, [r4, #0]
 800374c:	bf18      	it	ne
 800374e:	2301      	movne	r3, #1
 8003750:	0692      	lsls	r2, r2, #26
 8003752:	d42b      	bmi.n	80037ac <_printf_common+0xb0>
 8003754:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003758:	4649      	mov	r1, r9
 800375a:	4638      	mov	r0, r7
 800375c:	47c0      	blx	r8
 800375e:	3001      	adds	r0, #1
 8003760:	d01e      	beq.n	80037a0 <_printf_common+0xa4>
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	68e5      	ldr	r5, [r4, #12]
 8003766:	6832      	ldr	r2, [r6, #0]
 8003768:	f003 0306 	and.w	r3, r3, #6
 800376c:	2b04      	cmp	r3, #4
 800376e:	bf08      	it	eq
 8003770:	1aad      	subeq	r5, r5, r2
 8003772:	68a3      	ldr	r3, [r4, #8]
 8003774:	6922      	ldr	r2, [r4, #16]
 8003776:	bf0c      	ite	eq
 8003778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800377c:	2500      	movne	r5, #0
 800377e:	4293      	cmp	r3, r2
 8003780:	bfc4      	itt	gt
 8003782:	1a9b      	subgt	r3, r3, r2
 8003784:	18ed      	addgt	r5, r5, r3
 8003786:	2600      	movs	r6, #0
 8003788:	341a      	adds	r4, #26
 800378a:	42b5      	cmp	r5, r6
 800378c:	d11a      	bne.n	80037c4 <_printf_common+0xc8>
 800378e:	2000      	movs	r0, #0
 8003790:	e008      	b.n	80037a4 <_printf_common+0xa8>
 8003792:	2301      	movs	r3, #1
 8003794:	4652      	mov	r2, sl
 8003796:	4649      	mov	r1, r9
 8003798:	4638      	mov	r0, r7
 800379a:	47c0      	blx	r8
 800379c:	3001      	adds	r0, #1
 800379e:	d103      	bne.n	80037a8 <_printf_common+0xac>
 80037a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037a8:	3501      	adds	r5, #1
 80037aa:	e7c6      	b.n	800373a <_printf_common+0x3e>
 80037ac:	18e1      	adds	r1, r4, r3
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	2030      	movs	r0, #48	; 0x30
 80037b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037b6:	4422      	add	r2, r4
 80037b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037c0:	3302      	adds	r3, #2
 80037c2:	e7c7      	b.n	8003754 <_printf_common+0x58>
 80037c4:	2301      	movs	r3, #1
 80037c6:	4622      	mov	r2, r4
 80037c8:	4649      	mov	r1, r9
 80037ca:	4638      	mov	r0, r7
 80037cc:	47c0      	blx	r8
 80037ce:	3001      	adds	r0, #1
 80037d0:	d0e6      	beq.n	80037a0 <_printf_common+0xa4>
 80037d2:	3601      	adds	r6, #1
 80037d4:	e7d9      	b.n	800378a <_printf_common+0x8e>
	...

080037d8 <_printf_i>:
 80037d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037dc:	7e0f      	ldrb	r7, [r1, #24]
 80037de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80037e0:	2f78      	cmp	r7, #120	; 0x78
 80037e2:	4691      	mov	r9, r2
 80037e4:	4680      	mov	r8, r0
 80037e6:	460c      	mov	r4, r1
 80037e8:	469a      	mov	sl, r3
 80037ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80037ee:	d807      	bhi.n	8003800 <_printf_i+0x28>
 80037f0:	2f62      	cmp	r7, #98	; 0x62
 80037f2:	d80a      	bhi.n	800380a <_printf_i+0x32>
 80037f4:	2f00      	cmp	r7, #0
 80037f6:	f000 80d8 	beq.w	80039aa <_printf_i+0x1d2>
 80037fa:	2f58      	cmp	r7, #88	; 0x58
 80037fc:	f000 80a3 	beq.w	8003946 <_printf_i+0x16e>
 8003800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003808:	e03a      	b.n	8003880 <_printf_i+0xa8>
 800380a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800380e:	2b15      	cmp	r3, #21
 8003810:	d8f6      	bhi.n	8003800 <_printf_i+0x28>
 8003812:	a101      	add	r1, pc, #4	; (adr r1, 8003818 <_printf_i+0x40>)
 8003814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003818:	08003871 	.word	0x08003871
 800381c:	08003885 	.word	0x08003885
 8003820:	08003801 	.word	0x08003801
 8003824:	08003801 	.word	0x08003801
 8003828:	08003801 	.word	0x08003801
 800382c:	08003801 	.word	0x08003801
 8003830:	08003885 	.word	0x08003885
 8003834:	08003801 	.word	0x08003801
 8003838:	08003801 	.word	0x08003801
 800383c:	08003801 	.word	0x08003801
 8003840:	08003801 	.word	0x08003801
 8003844:	08003991 	.word	0x08003991
 8003848:	080038b5 	.word	0x080038b5
 800384c:	08003973 	.word	0x08003973
 8003850:	08003801 	.word	0x08003801
 8003854:	08003801 	.word	0x08003801
 8003858:	080039b3 	.word	0x080039b3
 800385c:	08003801 	.word	0x08003801
 8003860:	080038b5 	.word	0x080038b5
 8003864:	08003801 	.word	0x08003801
 8003868:	08003801 	.word	0x08003801
 800386c:	0800397b 	.word	0x0800397b
 8003870:	682b      	ldr	r3, [r5, #0]
 8003872:	1d1a      	adds	r2, r3, #4
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	602a      	str	r2, [r5, #0]
 8003878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800387c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003880:	2301      	movs	r3, #1
 8003882:	e0a3      	b.n	80039cc <_printf_i+0x1f4>
 8003884:	6820      	ldr	r0, [r4, #0]
 8003886:	6829      	ldr	r1, [r5, #0]
 8003888:	0606      	lsls	r6, r0, #24
 800388a:	f101 0304 	add.w	r3, r1, #4
 800388e:	d50a      	bpl.n	80038a6 <_printf_i+0xce>
 8003890:	680e      	ldr	r6, [r1, #0]
 8003892:	602b      	str	r3, [r5, #0]
 8003894:	2e00      	cmp	r6, #0
 8003896:	da03      	bge.n	80038a0 <_printf_i+0xc8>
 8003898:	232d      	movs	r3, #45	; 0x2d
 800389a:	4276      	negs	r6, r6
 800389c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038a0:	485e      	ldr	r0, [pc, #376]	; (8003a1c <_printf_i+0x244>)
 80038a2:	230a      	movs	r3, #10
 80038a4:	e019      	b.n	80038da <_printf_i+0x102>
 80038a6:	680e      	ldr	r6, [r1, #0]
 80038a8:	602b      	str	r3, [r5, #0]
 80038aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038ae:	bf18      	it	ne
 80038b0:	b236      	sxthne	r6, r6
 80038b2:	e7ef      	b.n	8003894 <_printf_i+0xbc>
 80038b4:	682b      	ldr	r3, [r5, #0]
 80038b6:	6820      	ldr	r0, [r4, #0]
 80038b8:	1d19      	adds	r1, r3, #4
 80038ba:	6029      	str	r1, [r5, #0]
 80038bc:	0601      	lsls	r1, r0, #24
 80038be:	d501      	bpl.n	80038c4 <_printf_i+0xec>
 80038c0:	681e      	ldr	r6, [r3, #0]
 80038c2:	e002      	b.n	80038ca <_printf_i+0xf2>
 80038c4:	0646      	lsls	r6, r0, #25
 80038c6:	d5fb      	bpl.n	80038c0 <_printf_i+0xe8>
 80038c8:	881e      	ldrh	r6, [r3, #0]
 80038ca:	4854      	ldr	r0, [pc, #336]	; (8003a1c <_printf_i+0x244>)
 80038cc:	2f6f      	cmp	r7, #111	; 0x6f
 80038ce:	bf0c      	ite	eq
 80038d0:	2308      	moveq	r3, #8
 80038d2:	230a      	movne	r3, #10
 80038d4:	2100      	movs	r1, #0
 80038d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038da:	6865      	ldr	r5, [r4, #4]
 80038dc:	60a5      	str	r5, [r4, #8]
 80038de:	2d00      	cmp	r5, #0
 80038e0:	bfa2      	ittt	ge
 80038e2:	6821      	ldrge	r1, [r4, #0]
 80038e4:	f021 0104 	bicge.w	r1, r1, #4
 80038e8:	6021      	strge	r1, [r4, #0]
 80038ea:	b90e      	cbnz	r6, 80038f0 <_printf_i+0x118>
 80038ec:	2d00      	cmp	r5, #0
 80038ee:	d04d      	beq.n	800398c <_printf_i+0x1b4>
 80038f0:	4615      	mov	r5, r2
 80038f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80038f6:	fb03 6711 	mls	r7, r3, r1, r6
 80038fa:	5dc7      	ldrb	r7, [r0, r7]
 80038fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003900:	4637      	mov	r7, r6
 8003902:	42bb      	cmp	r3, r7
 8003904:	460e      	mov	r6, r1
 8003906:	d9f4      	bls.n	80038f2 <_printf_i+0x11a>
 8003908:	2b08      	cmp	r3, #8
 800390a:	d10b      	bne.n	8003924 <_printf_i+0x14c>
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	07de      	lsls	r6, r3, #31
 8003910:	d508      	bpl.n	8003924 <_printf_i+0x14c>
 8003912:	6923      	ldr	r3, [r4, #16]
 8003914:	6861      	ldr	r1, [r4, #4]
 8003916:	4299      	cmp	r1, r3
 8003918:	bfde      	ittt	le
 800391a:	2330      	movle	r3, #48	; 0x30
 800391c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003920:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003924:	1b52      	subs	r2, r2, r5
 8003926:	6122      	str	r2, [r4, #16]
 8003928:	f8cd a000 	str.w	sl, [sp]
 800392c:	464b      	mov	r3, r9
 800392e:	aa03      	add	r2, sp, #12
 8003930:	4621      	mov	r1, r4
 8003932:	4640      	mov	r0, r8
 8003934:	f7ff fee2 	bl	80036fc <_printf_common>
 8003938:	3001      	adds	r0, #1
 800393a:	d14c      	bne.n	80039d6 <_printf_i+0x1fe>
 800393c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003940:	b004      	add	sp, #16
 8003942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003946:	4835      	ldr	r0, [pc, #212]	; (8003a1c <_printf_i+0x244>)
 8003948:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800394c:	6829      	ldr	r1, [r5, #0]
 800394e:	6823      	ldr	r3, [r4, #0]
 8003950:	f851 6b04 	ldr.w	r6, [r1], #4
 8003954:	6029      	str	r1, [r5, #0]
 8003956:	061d      	lsls	r5, r3, #24
 8003958:	d514      	bpl.n	8003984 <_printf_i+0x1ac>
 800395a:	07df      	lsls	r7, r3, #31
 800395c:	bf44      	itt	mi
 800395e:	f043 0320 	orrmi.w	r3, r3, #32
 8003962:	6023      	strmi	r3, [r4, #0]
 8003964:	b91e      	cbnz	r6, 800396e <_printf_i+0x196>
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	f023 0320 	bic.w	r3, r3, #32
 800396c:	6023      	str	r3, [r4, #0]
 800396e:	2310      	movs	r3, #16
 8003970:	e7b0      	b.n	80038d4 <_printf_i+0xfc>
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	f043 0320 	orr.w	r3, r3, #32
 8003978:	6023      	str	r3, [r4, #0]
 800397a:	2378      	movs	r3, #120	; 0x78
 800397c:	4828      	ldr	r0, [pc, #160]	; (8003a20 <_printf_i+0x248>)
 800397e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003982:	e7e3      	b.n	800394c <_printf_i+0x174>
 8003984:	0659      	lsls	r1, r3, #25
 8003986:	bf48      	it	mi
 8003988:	b2b6      	uxthmi	r6, r6
 800398a:	e7e6      	b.n	800395a <_printf_i+0x182>
 800398c:	4615      	mov	r5, r2
 800398e:	e7bb      	b.n	8003908 <_printf_i+0x130>
 8003990:	682b      	ldr	r3, [r5, #0]
 8003992:	6826      	ldr	r6, [r4, #0]
 8003994:	6961      	ldr	r1, [r4, #20]
 8003996:	1d18      	adds	r0, r3, #4
 8003998:	6028      	str	r0, [r5, #0]
 800399a:	0635      	lsls	r5, r6, #24
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	d501      	bpl.n	80039a4 <_printf_i+0x1cc>
 80039a0:	6019      	str	r1, [r3, #0]
 80039a2:	e002      	b.n	80039aa <_printf_i+0x1d2>
 80039a4:	0670      	lsls	r0, r6, #25
 80039a6:	d5fb      	bpl.n	80039a0 <_printf_i+0x1c8>
 80039a8:	8019      	strh	r1, [r3, #0]
 80039aa:	2300      	movs	r3, #0
 80039ac:	6123      	str	r3, [r4, #16]
 80039ae:	4615      	mov	r5, r2
 80039b0:	e7ba      	b.n	8003928 <_printf_i+0x150>
 80039b2:	682b      	ldr	r3, [r5, #0]
 80039b4:	1d1a      	adds	r2, r3, #4
 80039b6:	602a      	str	r2, [r5, #0]
 80039b8:	681d      	ldr	r5, [r3, #0]
 80039ba:	6862      	ldr	r2, [r4, #4]
 80039bc:	2100      	movs	r1, #0
 80039be:	4628      	mov	r0, r5
 80039c0:	f7fc fc0e 	bl	80001e0 <memchr>
 80039c4:	b108      	cbz	r0, 80039ca <_printf_i+0x1f2>
 80039c6:	1b40      	subs	r0, r0, r5
 80039c8:	6060      	str	r0, [r4, #4]
 80039ca:	6863      	ldr	r3, [r4, #4]
 80039cc:	6123      	str	r3, [r4, #16]
 80039ce:	2300      	movs	r3, #0
 80039d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039d4:	e7a8      	b.n	8003928 <_printf_i+0x150>
 80039d6:	6923      	ldr	r3, [r4, #16]
 80039d8:	462a      	mov	r2, r5
 80039da:	4649      	mov	r1, r9
 80039dc:	4640      	mov	r0, r8
 80039de:	47d0      	blx	sl
 80039e0:	3001      	adds	r0, #1
 80039e2:	d0ab      	beq.n	800393c <_printf_i+0x164>
 80039e4:	6823      	ldr	r3, [r4, #0]
 80039e6:	079b      	lsls	r3, r3, #30
 80039e8:	d413      	bmi.n	8003a12 <_printf_i+0x23a>
 80039ea:	68e0      	ldr	r0, [r4, #12]
 80039ec:	9b03      	ldr	r3, [sp, #12]
 80039ee:	4298      	cmp	r0, r3
 80039f0:	bfb8      	it	lt
 80039f2:	4618      	movlt	r0, r3
 80039f4:	e7a4      	b.n	8003940 <_printf_i+0x168>
 80039f6:	2301      	movs	r3, #1
 80039f8:	4632      	mov	r2, r6
 80039fa:	4649      	mov	r1, r9
 80039fc:	4640      	mov	r0, r8
 80039fe:	47d0      	blx	sl
 8003a00:	3001      	adds	r0, #1
 8003a02:	d09b      	beq.n	800393c <_printf_i+0x164>
 8003a04:	3501      	adds	r5, #1
 8003a06:	68e3      	ldr	r3, [r4, #12]
 8003a08:	9903      	ldr	r1, [sp, #12]
 8003a0a:	1a5b      	subs	r3, r3, r1
 8003a0c:	42ab      	cmp	r3, r5
 8003a0e:	dcf2      	bgt.n	80039f6 <_printf_i+0x21e>
 8003a10:	e7eb      	b.n	80039ea <_printf_i+0x212>
 8003a12:	2500      	movs	r5, #0
 8003a14:	f104 0619 	add.w	r6, r4, #25
 8003a18:	e7f5      	b.n	8003a06 <_printf_i+0x22e>
 8003a1a:	bf00      	nop
 8003a1c:	08003d39 	.word	0x08003d39
 8003a20:	08003d4a 	.word	0x08003d4a

08003a24 <memcpy>:
 8003a24:	440a      	add	r2, r1
 8003a26:	4291      	cmp	r1, r2
 8003a28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003a2c:	d100      	bne.n	8003a30 <memcpy+0xc>
 8003a2e:	4770      	bx	lr
 8003a30:	b510      	push	{r4, lr}
 8003a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a3a:	4291      	cmp	r1, r2
 8003a3c:	d1f9      	bne.n	8003a32 <memcpy+0xe>
 8003a3e:	bd10      	pop	{r4, pc}

08003a40 <memmove>:
 8003a40:	4288      	cmp	r0, r1
 8003a42:	b510      	push	{r4, lr}
 8003a44:	eb01 0402 	add.w	r4, r1, r2
 8003a48:	d902      	bls.n	8003a50 <memmove+0x10>
 8003a4a:	4284      	cmp	r4, r0
 8003a4c:	4623      	mov	r3, r4
 8003a4e:	d807      	bhi.n	8003a60 <memmove+0x20>
 8003a50:	1e43      	subs	r3, r0, #1
 8003a52:	42a1      	cmp	r1, r4
 8003a54:	d008      	beq.n	8003a68 <memmove+0x28>
 8003a56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a5e:	e7f8      	b.n	8003a52 <memmove+0x12>
 8003a60:	4402      	add	r2, r0
 8003a62:	4601      	mov	r1, r0
 8003a64:	428a      	cmp	r2, r1
 8003a66:	d100      	bne.n	8003a6a <memmove+0x2a>
 8003a68:	bd10      	pop	{r4, pc}
 8003a6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a72:	e7f7      	b.n	8003a64 <memmove+0x24>

08003a74 <_free_r>:
 8003a74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a76:	2900      	cmp	r1, #0
 8003a78:	d044      	beq.n	8003b04 <_free_r+0x90>
 8003a7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a7e:	9001      	str	r0, [sp, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f1a1 0404 	sub.w	r4, r1, #4
 8003a86:	bfb8      	it	lt
 8003a88:	18e4      	addlt	r4, r4, r3
 8003a8a:	f000 f913 	bl	8003cb4 <__malloc_lock>
 8003a8e:	4a1e      	ldr	r2, [pc, #120]	; (8003b08 <_free_r+0x94>)
 8003a90:	9801      	ldr	r0, [sp, #4]
 8003a92:	6813      	ldr	r3, [r2, #0]
 8003a94:	b933      	cbnz	r3, 8003aa4 <_free_r+0x30>
 8003a96:	6063      	str	r3, [r4, #4]
 8003a98:	6014      	str	r4, [r2, #0]
 8003a9a:	b003      	add	sp, #12
 8003a9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003aa0:	f000 b90e 	b.w	8003cc0 <__malloc_unlock>
 8003aa4:	42a3      	cmp	r3, r4
 8003aa6:	d908      	bls.n	8003aba <_free_r+0x46>
 8003aa8:	6825      	ldr	r5, [r4, #0]
 8003aaa:	1961      	adds	r1, r4, r5
 8003aac:	428b      	cmp	r3, r1
 8003aae:	bf01      	itttt	eq
 8003ab0:	6819      	ldreq	r1, [r3, #0]
 8003ab2:	685b      	ldreq	r3, [r3, #4]
 8003ab4:	1949      	addeq	r1, r1, r5
 8003ab6:	6021      	streq	r1, [r4, #0]
 8003ab8:	e7ed      	b.n	8003a96 <_free_r+0x22>
 8003aba:	461a      	mov	r2, r3
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	b10b      	cbz	r3, 8003ac4 <_free_r+0x50>
 8003ac0:	42a3      	cmp	r3, r4
 8003ac2:	d9fa      	bls.n	8003aba <_free_r+0x46>
 8003ac4:	6811      	ldr	r1, [r2, #0]
 8003ac6:	1855      	adds	r5, r2, r1
 8003ac8:	42a5      	cmp	r5, r4
 8003aca:	d10b      	bne.n	8003ae4 <_free_r+0x70>
 8003acc:	6824      	ldr	r4, [r4, #0]
 8003ace:	4421      	add	r1, r4
 8003ad0:	1854      	adds	r4, r2, r1
 8003ad2:	42a3      	cmp	r3, r4
 8003ad4:	6011      	str	r1, [r2, #0]
 8003ad6:	d1e0      	bne.n	8003a9a <_free_r+0x26>
 8003ad8:	681c      	ldr	r4, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	6053      	str	r3, [r2, #4]
 8003ade:	4421      	add	r1, r4
 8003ae0:	6011      	str	r1, [r2, #0]
 8003ae2:	e7da      	b.n	8003a9a <_free_r+0x26>
 8003ae4:	d902      	bls.n	8003aec <_free_r+0x78>
 8003ae6:	230c      	movs	r3, #12
 8003ae8:	6003      	str	r3, [r0, #0]
 8003aea:	e7d6      	b.n	8003a9a <_free_r+0x26>
 8003aec:	6825      	ldr	r5, [r4, #0]
 8003aee:	1961      	adds	r1, r4, r5
 8003af0:	428b      	cmp	r3, r1
 8003af2:	bf04      	itt	eq
 8003af4:	6819      	ldreq	r1, [r3, #0]
 8003af6:	685b      	ldreq	r3, [r3, #4]
 8003af8:	6063      	str	r3, [r4, #4]
 8003afa:	bf04      	itt	eq
 8003afc:	1949      	addeq	r1, r1, r5
 8003afe:	6021      	streq	r1, [r4, #0]
 8003b00:	6054      	str	r4, [r2, #4]
 8003b02:	e7ca      	b.n	8003a9a <_free_r+0x26>
 8003b04:	b003      	add	sp, #12
 8003b06:	bd30      	pop	{r4, r5, pc}
 8003b08:	20000120 	.word	0x20000120

08003b0c <sbrk_aligned>:
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	4e0e      	ldr	r6, [pc, #56]	; (8003b48 <sbrk_aligned+0x3c>)
 8003b10:	460c      	mov	r4, r1
 8003b12:	6831      	ldr	r1, [r6, #0]
 8003b14:	4605      	mov	r5, r0
 8003b16:	b911      	cbnz	r1, 8003b1e <sbrk_aligned+0x12>
 8003b18:	f000 f8bc 	bl	8003c94 <_sbrk_r>
 8003b1c:	6030      	str	r0, [r6, #0]
 8003b1e:	4621      	mov	r1, r4
 8003b20:	4628      	mov	r0, r5
 8003b22:	f000 f8b7 	bl	8003c94 <_sbrk_r>
 8003b26:	1c43      	adds	r3, r0, #1
 8003b28:	d00a      	beq.n	8003b40 <sbrk_aligned+0x34>
 8003b2a:	1cc4      	adds	r4, r0, #3
 8003b2c:	f024 0403 	bic.w	r4, r4, #3
 8003b30:	42a0      	cmp	r0, r4
 8003b32:	d007      	beq.n	8003b44 <sbrk_aligned+0x38>
 8003b34:	1a21      	subs	r1, r4, r0
 8003b36:	4628      	mov	r0, r5
 8003b38:	f000 f8ac 	bl	8003c94 <_sbrk_r>
 8003b3c:	3001      	adds	r0, #1
 8003b3e:	d101      	bne.n	8003b44 <sbrk_aligned+0x38>
 8003b40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003b44:	4620      	mov	r0, r4
 8003b46:	bd70      	pop	{r4, r5, r6, pc}
 8003b48:	20000124 	.word	0x20000124

08003b4c <_malloc_r>:
 8003b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b50:	1ccd      	adds	r5, r1, #3
 8003b52:	f025 0503 	bic.w	r5, r5, #3
 8003b56:	3508      	adds	r5, #8
 8003b58:	2d0c      	cmp	r5, #12
 8003b5a:	bf38      	it	cc
 8003b5c:	250c      	movcc	r5, #12
 8003b5e:	2d00      	cmp	r5, #0
 8003b60:	4607      	mov	r7, r0
 8003b62:	db01      	blt.n	8003b68 <_malloc_r+0x1c>
 8003b64:	42a9      	cmp	r1, r5
 8003b66:	d905      	bls.n	8003b74 <_malloc_r+0x28>
 8003b68:	230c      	movs	r3, #12
 8003b6a:	603b      	str	r3, [r7, #0]
 8003b6c:	2600      	movs	r6, #0
 8003b6e:	4630      	mov	r0, r6
 8003b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b74:	4e2e      	ldr	r6, [pc, #184]	; (8003c30 <_malloc_r+0xe4>)
 8003b76:	f000 f89d 	bl	8003cb4 <__malloc_lock>
 8003b7a:	6833      	ldr	r3, [r6, #0]
 8003b7c:	461c      	mov	r4, r3
 8003b7e:	bb34      	cbnz	r4, 8003bce <_malloc_r+0x82>
 8003b80:	4629      	mov	r1, r5
 8003b82:	4638      	mov	r0, r7
 8003b84:	f7ff ffc2 	bl	8003b0c <sbrk_aligned>
 8003b88:	1c43      	adds	r3, r0, #1
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	d14d      	bne.n	8003c2a <_malloc_r+0xde>
 8003b8e:	6834      	ldr	r4, [r6, #0]
 8003b90:	4626      	mov	r6, r4
 8003b92:	2e00      	cmp	r6, #0
 8003b94:	d140      	bne.n	8003c18 <_malloc_r+0xcc>
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	4631      	mov	r1, r6
 8003b9a:	4638      	mov	r0, r7
 8003b9c:	eb04 0803 	add.w	r8, r4, r3
 8003ba0:	f000 f878 	bl	8003c94 <_sbrk_r>
 8003ba4:	4580      	cmp	r8, r0
 8003ba6:	d13a      	bne.n	8003c1e <_malloc_r+0xd2>
 8003ba8:	6821      	ldr	r1, [r4, #0]
 8003baa:	3503      	adds	r5, #3
 8003bac:	1a6d      	subs	r5, r5, r1
 8003bae:	f025 0503 	bic.w	r5, r5, #3
 8003bb2:	3508      	adds	r5, #8
 8003bb4:	2d0c      	cmp	r5, #12
 8003bb6:	bf38      	it	cc
 8003bb8:	250c      	movcc	r5, #12
 8003bba:	4629      	mov	r1, r5
 8003bbc:	4638      	mov	r0, r7
 8003bbe:	f7ff ffa5 	bl	8003b0c <sbrk_aligned>
 8003bc2:	3001      	adds	r0, #1
 8003bc4:	d02b      	beq.n	8003c1e <_malloc_r+0xd2>
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	442b      	add	r3, r5
 8003bca:	6023      	str	r3, [r4, #0]
 8003bcc:	e00e      	b.n	8003bec <_malloc_r+0xa0>
 8003bce:	6822      	ldr	r2, [r4, #0]
 8003bd0:	1b52      	subs	r2, r2, r5
 8003bd2:	d41e      	bmi.n	8003c12 <_malloc_r+0xc6>
 8003bd4:	2a0b      	cmp	r2, #11
 8003bd6:	d916      	bls.n	8003c06 <_malloc_r+0xba>
 8003bd8:	1961      	adds	r1, r4, r5
 8003bda:	42a3      	cmp	r3, r4
 8003bdc:	6025      	str	r5, [r4, #0]
 8003bde:	bf18      	it	ne
 8003be0:	6059      	strne	r1, [r3, #4]
 8003be2:	6863      	ldr	r3, [r4, #4]
 8003be4:	bf08      	it	eq
 8003be6:	6031      	streq	r1, [r6, #0]
 8003be8:	5162      	str	r2, [r4, r5]
 8003bea:	604b      	str	r3, [r1, #4]
 8003bec:	4638      	mov	r0, r7
 8003bee:	f104 060b 	add.w	r6, r4, #11
 8003bf2:	f000 f865 	bl	8003cc0 <__malloc_unlock>
 8003bf6:	f026 0607 	bic.w	r6, r6, #7
 8003bfa:	1d23      	adds	r3, r4, #4
 8003bfc:	1af2      	subs	r2, r6, r3
 8003bfe:	d0b6      	beq.n	8003b6e <_malloc_r+0x22>
 8003c00:	1b9b      	subs	r3, r3, r6
 8003c02:	50a3      	str	r3, [r4, r2]
 8003c04:	e7b3      	b.n	8003b6e <_malloc_r+0x22>
 8003c06:	6862      	ldr	r2, [r4, #4]
 8003c08:	42a3      	cmp	r3, r4
 8003c0a:	bf0c      	ite	eq
 8003c0c:	6032      	streq	r2, [r6, #0]
 8003c0e:	605a      	strne	r2, [r3, #4]
 8003c10:	e7ec      	b.n	8003bec <_malloc_r+0xa0>
 8003c12:	4623      	mov	r3, r4
 8003c14:	6864      	ldr	r4, [r4, #4]
 8003c16:	e7b2      	b.n	8003b7e <_malloc_r+0x32>
 8003c18:	4634      	mov	r4, r6
 8003c1a:	6876      	ldr	r6, [r6, #4]
 8003c1c:	e7b9      	b.n	8003b92 <_malloc_r+0x46>
 8003c1e:	230c      	movs	r3, #12
 8003c20:	603b      	str	r3, [r7, #0]
 8003c22:	4638      	mov	r0, r7
 8003c24:	f000 f84c 	bl	8003cc0 <__malloc_unlock>
 8003c28:	e7a1      	b.n	8003b6e <_malloc_r+0x22>
 8003c2a:	6025      	str	r5, [r4, #0]
 8003c2c:	e7de      	b.n	8003bec <_malloc_r+0xa0>
 8003c2e:	bf00      	nop
 8003c30:	20000120 	.word	0x20000120

08003c34 <_realloc_r>:
 8003c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c38:	4680      	mov	r8, r0
 8003c3a:	4614      	mov	r4, r2
 8003c3c:	460e      	mov	r6, r1
 8003c3e:	b921      	cbnz	r1, 8003c4a <_realloc_r+0x16>
 8003c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c44:	4611      	mov	r1, r2
 8003c46:	f7ff bf81 	b.w	8003b4c <_malloc_r>
 8003c4a:	b92a      	cbnz	r2, 8003c58 <_realloc_r+0x24>
 8003c4c:	f7ff ff12 	bl	8003a74 <_free_r>
 8003c50:	4625      	mov	r5, r4
 8003c52:	4628      	mov	r0, r5
 8003c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c58:	f000 f838 	bl	8003ccc <_malloc_usable_size_r>
 8003c5c:	4284      	cmp	r4, r0
 8003c5e:	4607      	mov	r7, r0
 8003c60:	d802      	bhi.n	8003c68 <_realloc_r+0x34>
 8003c62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c66:	d812      	bhi.n	8003c8e <_realloc_r+0x5a>
 8003c68:	4621      	mov	r1, r4
 8003c6a:	4640      	mov	r0, r8
 8003c6c:	f7ff ff6e 	bl	8003b4c <_malloc_r>
 8003c70:	4605      	mov	r5, r0
 8003c72:	2800      	cmp	r0, #0
 8003c74:	d0ed      	beq.n	8003c52 <_realloc_r+0x1e>
 8003c76:	42bc      	cmp	r4, r7
 8003c78:	4622      	mov	r2, r4
 8003c7a:	4631      	mov	r1, r6
 8003c7c:	bf28      	it	cs
 8003c7e:	463a      	movcs	r2, r7
 8003c80:	f7ff fed0 	bl	8003a24 <memcpy>
 8003c84:	4631      	mov	r1, r6
 8003c86:	4640      	mov	r0, r8
 8003c88:	f7ff fef4 	bl	8003a74 <_free_r>
 8003c8c:	e7e1      	b.n	8003c52 <_realloc_r+0x1e>
 8003c8e:	4635      	mov	r5, r6
 8003c90:	e7df      	b.n	8003c52 <_realloc_r+0x1e>
	...

08003c94 <_sbrk_r>:
 8003c94:	b538      	push	{r3, r4, r5, lr}
 8003c96:	4d06      	ldr	r5, [pc, #24]	; (8003cb0 <_sbrk_r+0x1c>)
 8003c98:	2300      	movs	r3, #0
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	4608      	mov	r0, r1
 8003c9e:	602b      	str	r3, [r5, #0]
 8003ca0:	f7fd fbb6 	bl	8001410 <_sbrk>
 8003ca4:	1c43      	adds	r3, r0, #1
 8003ca6:	d102      	bne.n	8003cae <_sbrk_r+0x1a>
 8003ca8:	682b      	ldr	r3, [r5, #0]
 8003caa:	b103      	cbz	r3, 8003cae <_sbrk_r+0x1a>
 8003cac:	6023      	str	r3, [r4, #0]
 8003cae:	bd38      	pop	{r3, r4, r5, pc}
 8003cb0:	20000128 	.word	0x20000128

08003cb4 <__malloc_lock>:
 8003cb4:	4801      	ldr	r0, [pc, #4]	; (8003cbc <__malloc_lock+0x8>)
 8003cb6:	f000 b811 	b.w	8003cdc <__retarget_lock_acquire_recursive>
 8003cba:	bf00      	nop
 8003cbc:	2000012c 	.word	0x2000012c

08003cc0 <__malloc_unlock>:
 8003cc0:	4801      	ldr	r0, [pc, #4]	; (8003cc8 <__malloc_unlock+0x8>)
 8003cc2:	f000 b80c 	b.w	8003cde <__retarget_lock_release_recursive>
 8003cc6:	bf00      	nop
 8003cc8:	2000012c 	.word	0x2000012c

08003ccc <_malloc_usable_size_r>:
 8003ccc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cd0:	1f18      	subs	r0, r3, #4
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	bfbc      	itt	lt
 8003cd6:	580b      	ldrlt	r3, [r1, r0]
 8003cd8:	18c0      	addlt	r0, r0, r3
 8003cda:	4770      	bx	lr

08003cdc <__retarget_lock_acquire_recursive>:
 8003cdc:	4770      	bx	lr

08003cde <__retarget_lock_release_recursive>:
 8003cde:	4770      	bx	lr

08003ce0 <_init>:
 8003ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce2:	bf00      	nop
 8003ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ce6:	bc08      	pop	{r3}
 8003ce8:	469e      	mov	lr, r3
 8003cea:	4770      	bx	lr

08003cec <_fini>:
 8003cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cee:	bf00      	nop
 8003cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf2:	bc08      	pop	{r3}
 8003cf4:	469e      	mov	lr, r3
 8003cf6:	4770      	bx	lr
